=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class TssV2TransactionsGet200ResponseProcessorInformation
    attr_accessor :processor

    # An array of object that contains the list of acquirer response codes & reasons if a transaction is routed to multiple acquirers.
    attr_accessor :multi_processor_routing

    # Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value.  Returned by the authorization service.  #### PIN debit Transaction identifier generated by the processor.  Returned by PIN debit credit.  #### GPX Processor transaction ID.  #### Cielo For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.  #### Comercio Latino For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.  #### CyberSource through VisaNet and GPN For details about this value for CyberSource through VisaNet and GPN, see \"processorInformation.networkTransactionId\" in [REST API Fields](https://developer.cybersource.com/content/dam/docs/cybs/en-us/apifields/reference/all/rest/api-fields.pdf)  #### Moneris This value identifies the transaction on a host system. It contains the following information: - Terminal used to process the transaction - Shift during which the transaction took place - Batch number - Transaction number within the batch You must store this value. If you give the customer a receipt, display this value on the receipt.  **Example** For the value 66012345001069003: - Terminal ID = 66012345 - Shift number = 001 - Batch number = 069 - Transaction number = 003 
    attr_accessor :transaction_id

    # Same value as `processorInformation.transactionId`
    attr_accessor :network_transaction_id

    # #### Ingenico ePayments Unique number that CyberSource generates to identify the transaction. You can use this value to identify transactions in the Ingenico ePayments Collections Report, which provides settlement information. Contact customer support for information about the report.  ### CyberSource through VisaNet Retrieval request number. 
    attr_accessor :retrieval_reference_number

    # Response ID sent from the processor. 
    attr_accessor :response_id

    # Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000. 
    attr_accessor :approval_code

    # For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3)  #### paypalgateway Processor generated ID for the itemized detail. 
    attr_accessor :response_code

    attr_accessor :avs

    attr_accessor :card_verification

    attr_accessor :ach_verification

    attr_accessor :electronic_verification_results

    # The event status. 
    attr_accessor :event_status

    # This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer's receipt. 
    attr_accessor :system_trace_audit_number

    # Used by Visa only and contains the response source/reason code that identifies the source of the response decision. 
    attr_accessor :response_code_source

    # Payment Account Reference (PAR) is a non-financial reference assigned to each unique payment account and used to link a payment account to associated network tokens, i.e. the same PAR is returned for PAN-based and tokenized transactions, such as from digital wallets. PAR can be returned in authorisation responses for requests initiated with both real PANs and tokenized PANs. PAR can be used by merchants for fraud detection and regulatory compliance across different channels and digital wallets. PAR allows all participants in the payments chain to have a single, non-sensitive value assigned to a consumer. This value can be used in place of sensitive card holder identification fields, and transmitted across the payments ecosystem to facilitate card holder identification.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR8 - Position: 79-110 - Field: Payment Account Reference  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant's acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. 
    attr_accessor :payment_account_reference_number

    attr_accessor :routing

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'processor' => :'processor',
        :'multi_processor_routing' => :'multiProcessorRouting',
        :'transaction_id' => :'transactionId',
        :'network_transaction_id' => :'networkTransactionId',
        :'retrieval_reference_number' => :'retrievalReferenceNumber',
        :'response_id' => :'responseId',
        :'approval_code' => :'approvalCode',
        :'response_code' => :'responseCode',
        :'avs' => :'avs',
        :'card_verification' => :'cardVerification',
        :'ach_verification' => :'achVerification',
        :'electronic_verification_results' => :'electronicVerificationResults',
        :'event_status' => :'eventStatus',
        :'system_trace_audit_number' => :'systemTraceAuditNumber',
        :'response_code_source' => :'responseCodeSource',
        :'payment_account_reference_number' => :'paymentAccountReferenceNumber',
        :'routing' => :'routing'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'processor' => :'processor',
        :'multi_processor_routing' => :'multi_processor_routing',
        :'transaction_id' => :'transaction_id',
        :'network_transaction_id' => :'network_transaction_id',
        :'retrieval_reference_number' => :'retrieval_reference_number',
        :'response_id' => :'response_id',
        :'approval_code' => :'approval_code',
        :'response_code' => :'response_code',
        :'avs' => :'avs',
        :'card_verification' => :'card_verification',
        :'ach_verification' => :'ach_verification',
        :'electronic_verification_results' => :'electronic_verification_results',
        :'event_status' => :'event_status',
        :'system_trace_audit_number' => :'system_trace_audit_number',
        :'response_code_source' => :'response_code_source',
        :'payment_account_reference_number' => :'payment_account_reference_number',
        :'routing' => :'routing'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'processor' => :'TssV2TransactionsGet200ResponseProcessorInformationProcessor',
        :'multi_processor_routing' => :'Array<TssV2TransactionsGet200ResponseProcessorInformationMultiProcessorRouting>',
        :'transaction_id' => :'String',
        :'network_transaction_id' => :'String',
        :'retrieval_reference_number' => :'String',
        :'response_id' => :'String',
        :'approval_code' => :'String',
        :'response_code' => :'String',
        :'avs' => :'PtsV2PaymentsPost201ResponseProcessorInformationAvs',
        :'card_verification' => :'Riskv1decisionsProcessorInformationCardVerification',
        :'ach_verification' => :'PtsV2PaymentsPost201ResponseProcessorInformationAchVerification',
        :'electronic_verification_results' => :'TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults',
        :'event_status' => :'String',
        :'system_trace_audit_number' => :'String',
        :'response_code_source' => :'String',
        :'payment_account_reference_number' => :'String',
        :'routing' => :'PtsV2PaymentsPost201ResponseProcessorInformationRouting'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'processor')
        self.processor = attributes[:'processor']
      end

      if attributes.has_key?(:'multiProcessorRouting')
        if (value = attributes[:'multiProcessorRouting']).is_a?(Array)
          self.multi_processor_routing = value
        end
      end

      if attributes.has_key?(:'transactionId')
        self.transaction_id = attributes[:'transactionId']
      end

      if attributes.has_key?(:'networkTransactionId')
        self.network_transaction_id = attributes[:'networkTransactionId']
      end

      if attributes.has_key?(:'retrievalReferenceNumber')
        self.retrieval_reference_number = attributes[:'retrievalReferenceNumber']
      end

      if attributes.has_key?(:'responseId')
        self.response_id = attributes[:'responseId']
      end

      if attributes.has_key?(:'approvalCode')
        self.approval_code = attributes[:'approvalCode']
      end

      if attributes.has_key?(:'responseCode')
        self.response_code = attributes[:'responseCode']
      end

      if attributes.has_key?(:'avs')
        self.avs = attributes[:'avs']
      end

      if attributes.has_key?(:'cardVerification')
        self.card_verification = attributes[:'cardVerification']
      end

      if attributes.has_key?(:'achVerification')
        self.ach_verification = attributes[:'achVerification']
      end

      if attributes.has_key?(:'electronicVerificationResults')
        self.electronic_verification_results = attributes[:'electronicVerificationResults']
      end

      if attributes.has_key?(:'eventStatus')
        self.event_status = attributes[:'eventStatus']
      end

      if attributes.has_key?(:'systemTraceAuditNumber')
        self.system_trace_audit_number = attributes[:'systemTraceAuditNumber']
      end

      if attributes.has_key?(:'responseCodeSource')
        self.response_code_source = attributes[:'responseCodeSource']
      end

      if attributes.has_key?(:'paymentAccountReferenceNumber')
        self.payment_account_reference_number = attributes[:'paymentAccountReferenceNumber']
      end

      if attributes.has_key?(:'routing')
        self.routing = attributes[:'routing']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_id Value to be assigned
    def transaction_id=(transaction_id)
      @transaction_id = transaction_id
    end

    # Custom attribute writer method with validation
    # @param [Object] retrieval_reference_number Value to be assigned
    def retrieval_reference_number=(retrieval_reference_number)
      @retrieval_reference_number = retrieval_reference_number
    end

    # Custom attribute writer method with validation
    # @param [Object] approval_code Value to be assigned
    def approval_code=(approval_code)
      @approval_code = approval_code
    end

    # Custom attribute writer method with validation
    # @param [Object] response_code Value to be assigned
    def response_code=(response_code)
      @response_code = response_code
    end

    # Custom attribute writer method with validation
    # @param [Object] system_trace_audit_number Value to be assigned
    def system_trace_audit_number=(system_trace_audit_number)
      @system_trace_audit_number = system_trace_audit_number
    end

    # Custom attribute writer method with validation
    # @param [Object] response_code_source Value to be assigned
    def response_code_source=(response_code_source)
      @response_code_source = response_code_source
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_account_reference_number Value to be assigned
    def payment_account_reference_number=(payment_account_reference_number)
      @payment_account_reference_number = payment_account_reference_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          processor == o.processor &&
          multi_processor_routing == o.multi_processor_routing &&
          transaction_id == o.transaction_id &&
          network_transaction_id == o.network_transaction_id &&
          retrieval_reference_number == o.retrieval_reference_number &&
          response_id == o.response_id &&
          approval_code == o.approval_code &&
          response_code == o.response_code &&
          avs == o.avs &&
          card_verification == o.card_verification &&
          ach_verification == o.ach_verification &&
          electronic_verification_results == o.electronic_verification_results &&
          event_status == o.event_status &&
          system_trace_audit_number == o.system_trace_audit_number &&
          response_code_source == o.response_code_source &&
          payment_account_reference_number == o.payment_account_reference_number &&
          routing == o.routing
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [processor, multi_processor_routing, transaction_id, network_transaction_id, retrieval_reference_number, response_id, approval_code, response_code, avs, card_verification, ach_verification, electronic_verification_results, event_status, system_trace_audit_number, response_code_source, payment_account_reference_number, routing].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
