=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class Upv1capturecontextsCaptureMandate
    # Configure Unified Checkout to capture billing address information.  Possible values: - FULL: Capture complete billing address information. - PARTIAL: Capture first name, last name, country and postal/zip code only. - NONE: Capture only first name and last name. 
    attr_accessor :billing_type

    # Configure Unified Checkout to capture customer email address.  Possible values:  - True  - False 
    attr_accessor :request_email

    # Configure Unified Checkout to capture customer phone number.  Possible values: - True - False 
    attr_accessor :request_phone

    # Configure Unified Checkout to capture customer shipping details.  Possible values: - True - False 
    attr_accessor :request_shipping

    # List of countries available to ship to.   Use the two-character ISO Standard Country Codes. 
    attr_accessor :ship_to_countries

    # Configure Unified Checkout to display the list of accepted card networks beneath the payment button  Possible values: - True - False 
    attr_accessor :show_accepted_network_icons

    # Configure Unified Checkout to display the final confirmation screen when using Click to Pay.<br> Where 'BillingType'= NONE and 'requestShipping'= FALSE and the customer is using an existing Click to Pay card as their chosen payment method, a final confirmation screen can be removed allowing the customer to check out as soon as they have selected their payment method from within their Click to Pay card tray.  Possible values: - True - False 
    attr_accessor :show_confirmation_step

    # Configure Unified Checkout to display the \"Save card for future use\" checkbox.<br>  Configurable check box that will show in a Manual card entry flow to allow a Cardholder to give consent to store their manually entered credential with the Merchant that they are paying.<br>  Applicable when manually entering the details and not enrolling in Click to Pay.  Possible values:  - True   - False<br><br>  **Use Cases:**  **Offer consumers option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to true. - When set to true, this will show a checkbox with the message 'Save card for future use' in Unified Checkout. - When selected this provides a response in both the Transient Token and Get Credentials API response.<br><br>  **Do not offer consumers the option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to false OR omit the field from the capture context request. - When set to false, the save card option is not shown to consumers when manually entering card details. 
    attr_accessor :request_save_card

    # Configure Unified Checkout to display combo card at checkout.<br>  A combo debit/credit card is a single card that functions both as a Debit/Credit card.  Unified Checkout / Click to Pay Drop-in UI allows the Cardholder to choose whether they would like the transaction to be paid for using either debit or credit card. **Important:** This is applicable to Visa cards only.  Possible values: - True  - False<br><br>  **Use Cases:**  **Offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to true. - When set to true, Combo Card selection is shown at checkout <br><br>  **Do not offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to false OR omit the field from the capture context request. - The Combo Card selection is not shown at checkout. 
    attr_accessor :combo_card

    # Configure Unified Checkout to display and capture the CPF number (Cadastro de Pessoas FÃ­sicas).  The CPF number is a unique 11-digit identifier issued to Brazilian citizens and residents for tax purposes.  Possible values: - True - False<br><br>  This field is optional.   If set to true the field is required. If set to false the field is optional. If the field is not included in the capture context then it is not captured.<br><br>  **Important:**  - If PANENTRY is specified in the allowedPaymentTypes field, the CPF number will be displayed in Unified Checkout regardless of what card number is entered.  - If CLICKTOPAY is specified in the allowedPaymentTypes field, the CPF number will be displayed in Unified Checkout only when a Visa Click To Pay card is entered. 
    attr_accessor :cpf

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'billing_type' => :'billingType',
        :'request_email' => :'requestEmail',
        :'request_phone' => :'requestPhone',
        :'request_shipping' => :'requestShipping',
        :'ship_to_countries' => :'shipToCountries',
        :'show_accepted_network_icons' => :'showAcceptedNetworkIcons',
        :'show_confirmation_step' => :'showConfirmationStep',
        :'request_save_card' => :'requestSaveCard',
        :'combo_card' => :'comboCard',
        :'cpf' => :'CPF'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'billing_type' => :'billing_type',
        :'request_email' => :'request_email',
        :'request_phone' => :'request_phone',
        :'request_shipping' => :'request_shipping',
        :'ship_to_countries' => :'ship_to_countries',
        :'show_accepted_network_icons' => :'show_accepted_network_icons',
        :'show_confirmation_step' => :'show_confirmation_step',
        :'request_save_card' => :'request_save_card',
        :'combo_card' => :'combo_card',
        :'cpf' => :'cpf'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'billing_type' => :'String',
        :'request_email' => :'BOOLEAN',
        :'request_phone' => :'BOOLEAN',
        :'request_shipping' => :'BOOLEAN',
        :'ship_to_countries' => :'Array<String>',
        :'show_accepted_network_icons' => :'BOOLEAN',
        :'show_confirmation_step' => :'BOOLEAN',
        :'request_save_card' => :'BOOLEAN',
        :'combo_card' => :'BOOLEAN',
        :'cpf' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'billingType')
        self.billing_type = attributes[:'billingType']
      end

      if attributes.has_key?(:'requestEmail')
        self.request_email = attributes[:'requestEmail']
      end

      if attributes.has_key?(:'requestPhone')
        self.request_phone = attributes[:'requestPhone']
      end

      if attributes.has_key?(:'requestShipping')
        self.request_shipping = attributes[:'requestShipping']
      end

      if attributes.has_key?(:'shipToCountries')
        if (value = attributes[:'shipToCountries']).is_a?(Array)
          self.ship_to_countries = value
        end
      end

      if attributes.has_key?(:'showAcceptedNetworkIcons')
        self.show_accepted_network_icons = attributes[:'showAcceptedNetworkIcons']
      end

      if attributes.has_key?(:'showConfirmationStep')
        self.show_confirmation_step = attributes[:'showConfirmationStep']
      end

      if attributes.has_key?(:'requestSaveCard')
        self.request_save_card = attributes[:'requestSaveCard']
      end

      if attributes.has_key?(:'comboCard')
        self.combo_card = attributes[:'comboCard']
      end

      if attributes.has_key?(:'CPF')
        self.cpf = attributes[:'CPF']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] billing_type Value to be assigned
    def billing_type=(billing_type)
      @billing_type = billing_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          billing_type == o.billing_type &&
          request_email == o.request_email &&
          request_phone == o.request_phone &&
          request_shipping == o.request_shipping &&
          ship_to_countries == o.ship_to_countries &&
          show_accepted_network_icons == o.show_accepted_network_icons &&
          show_confirmation_step == o.show_confirmation_step &&
          request_save_card == o.request_save_card &&
          combo_card == o.combo_card &&
          cpf == o.cpf
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [billing_type, request_email, request_phone, request_shipping, ship_to_countries, show_accepted_network_icons, show_confirmation_step, request_save_card, combo_card, cpf].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
