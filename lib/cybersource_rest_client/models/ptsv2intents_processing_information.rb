=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class Ptsv2intentsProcessingInformation
    # The instruction to process an order. - default value: 'NO_INSTRUCTION' - 'ORDER_SAVED_EXPLICITLY' 
    attr_accessor :processing_instruction

    attr_accessor :authorization_options

    # Array of actions (one or more) to be included in the order to invoke bundled services along with order. Possible values: - `AP_ORDER`: Use this when Alternative Payment Order service is requested. 
    attr_accessor :action_list

    # Indicates if the transaction is flagged as high risk. 
    attr_accessor :high_risk_transaction_flag

    # Indicates if the transaction is a retry. 
    attr_accessor :transaction_retry

    # The number of transactions in the last one hour. 
    attr_accessor :last_one_hr_transaction_count

    # The number of transactions in the last one day. 
    attr_accessor :last_one_day_transaction_count

    # The number of transactions in the last three months. 
    attr_accessor :last_three_months_txn_count

    # The total number of transactions. 
    attr_accessor :total_transaction_count

    # Indicates if PIN verification is required. 
    attr_accessor :pin_verification

    # Indicates if face ID verification is required. 
    attr_accessor :face_id_verification

    # Indicates if the user passed verification. 
    attr_accessor :user_passed_verification

    # The IP address of the user. 
    attr_accessor :ip_address

    # The date of the transaction. 
    attr_accessor :transaction_date

    # Indicates if the transaction involves tangible goods. 
    attr_accessor :tangible

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'processing_instruction' => :'processingInstruction',
        :'authorization_options' => :'authorizationOptions',
        :'action_list' => :'actionList',
        :'high_risk_transaction_flag' => :'highRiskTransactionFlag',
        :'transaction_retry' => :'transactionRetry',
        :'last_one_hr_transaction_count' => :'lastOneHrTransactionCount',
        :'last_one_day_transaction_count' => :'lastOneDayTransactionCount',
        :'last_three_months_txn_count' => :'lastThreeMonthsTxnCount',
        :'total_transaction_count' => :'totalTransactionCount',
        :'pin_verification' => :'pinVerification',
        :'face_id_verification' => :'faceIdVerification',
        :'user_passed_verification' => :'userPassedVerification',
        :'ip_address' => :'ipAddress',
        :'transaction_date' => :'transactionDate',
        :'tangible' => :'tangible'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'processing_instruction' => :'processing_instruction',
        :'authorization_options' => :'authorization_options',
        :'action_list' => :'action_list',
        :'high_risk_transaction_flag' => :'high_risk_transaction_flag',
        :'transaction_retry' => :'transaction_retry',
        :'last_one_hr_transaction_count' => :'last_one_hr_transaction_count',
        :'last_one_day_transaction_count' => :'last_one_day_transaction_count',
        :'last_three_months_txn_count' => :'last_three_months_txn_count',
        :'total_transaction_count' => :'total_transaction_count',
        :'pin_verification' => :'pin_verification',
        :'face_id_verification' => :'face_id_verification',
        :'user_passed_verification' => :'user_passed_verification',
        :'ip_address' => :'ip_address',
        :'transaction_date' => :'transaction_date',
        :'tangible' => :'tangible'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'processing_instruction' => :'String',
        :'authorization_options' => :'Ptsv2intentsProcessingInformationAuthorizationOptions',
        :'action_list' => :'Array<String>',
        :'high_risk_transaction_flag' => :'String',
        :'transaction_retry' => :'String',
        :'last_one_hr_transaction_count' => :'String',
        :'last_one_day_transaction_count' => :'String',
        :'last_three_months_txn_count' => :'String',
        :'total_transaction_count' => :'String',
        :'pin_verification' => :'String',
        :'face_id_verification' => :'String',
        :'user_passed_verification' => :'String',
        :'ip_address' => :'String',
        :'transaction_date' => :'String',
        :'tangible' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'processingInstruction')
        self.processing_instruction = attributes[:'processingInstruction']
      end

      if attributes.has_key?(:'authorizationOptions')
        self.authorization_options = attributes[:'authorizationOptions']
      end

      if attributes.has_key?(:'actionList')
        if (value = attributes[:'actionList']).is_a?(Array)
          self.action_list = value
        end
      end

      if attributes.has_key?(:'highRiskTransactionFlag')
        self.high_risk_transaction_flag = attributes[:'highRiskTransactionFlag']
      end

      if attributes.has_key?(:'transactionRetry')
        self.transaction_retry = attributes[:'transactionRetry']
      end

      if attributes.has_key?(:'lastOneHrTransactionCount')
        self.last_one_hr_transaction_count = attributes[:'lastOneHrTransactionCount']
      end

      if attributes.has_key?(:'lastOneDayTransactionCount')
        self.last_one_day_transaction_count = attributes[:'lastOneDayTransactionCount']
      end

      if attributes.has_key?(:'lastThreeMonthsTxnCount')
        self.last_three_months_txn_count = attributes[:'lastThreeMonthsTxnCount']
      end

      if attributes.has_key?(:'totalTransactionCount')
        self.total_transaction_count = attributes[:'totalTransactionCount']
      end

      if attributes.has_key?(:'pinVerification')
        self.pin_verification = attributes[:'pinVerification']
      end

      if attributes.has_key?(:'faceIdVerification')
        self.face_id_verification = attributes[:'faceIdVerification']
      end

      if attributes.has_key?(:'userPassedVerification')
        self.user_passed_verification = attributes[:'userPassedVerification']
      end

      if attributes.has_key?(:'ipAddress')
        self.ip_address = attributes[:'ipAddress']
      end

      if attributes.has_key?(:'transactionDate')
        self.transaction_date = attributes[:'transactionDate']
      end

      if attributes.has_key?(:'tangible')
        self.tangible = attributes[:'tangible']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] processing_instruction Value to be assigned
    def processing_instruction=(processing_instruction)
      @processing_instruction = processing_instruction
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          processing_instruction == o.processing_instruction &&
          authorization_options == o.authorization_options &&
          action_list == o.action_list &&
          high_risk_transaction_flag == o.high_risk_transaction_flag &&
          transaction_retry == o.transaction_retry &&
          last_one_hr_transaction_count == o.last_one_hr_transaction_count &&
          last_one_day_transaction_count == o.last_one_day_transaction_count &&
          last_three_months_txn_count == o.last_three_months_txn_count &&
          total_transaction_count == o.total_transaction_count &&
          pin_verification == o.pin_verification &&
          face_id_verification == o.face_id_verification &&
          user_passed_verification == o.user_passed_verification &&
          ip_address == o.ip_address &&
          transaction_date == o.transaction_date &&
          tangible == o.tangible
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [processing_instruction, authorization_options, action_list, high_risk_transaction_flag, transaction_retry, last_one_hr_transaction_count, last_one_day_transaction_count, last_three_months_txn_count, total_transaction_count, pin_verification, face_id_verification, user_passed_verification, ip_address, transaction_date, tangible].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
