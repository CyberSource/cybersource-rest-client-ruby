=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class InlineResponse2006Devices
    attr_accessor :reader_id

    attr_accessor :serial_number

    attr_accessor :model

    attr_accessor :make

    attr_accessor :hardware_revision

    # Status of the device. Possible Values:   - 'ACTIVE'   - 'INACTIVE' 
    attr_accessor :status

    # Reason for change in status.
    attr_accessor :status_change_reason

    # ID of the merchant to whom this device is assigned.
    attr_accessor :merchant_id

    # ID of the account to whom the device assigned.
    attr_accessor :account_id

    # Timestamp in which the device was created.
    attr_accessor :terminal_creation_date

    # Timestamp in which the device was updated/modified.
    attr_accessor :terminal_updation_date

    attr_accessor :payment_processor_to_terminal_map

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'reader_id' => :'readerId',
        :'serial_number' => :'serialNumber',
        :'model' => :'model',
        :'make' => :'make',
        :'hardware_revision' => :'hardwareRevision',
        :'status' => :'status',
        :'status_change_reason' => :'statusChangeReason',
        :'merchant_id' => :'merchantId',
        :'account_id' => :'accountId',
        :'terminal_creation_date' => :'terminalCreationDate',
        :'terminal_updation_date' => :'terminalUpdationDate',
        :'payment_processor_to_terminal_map' => :'paymentProcessorToTerminalMap'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'reader_id' => :'reader_id',
        :'serial_number' => :'serial_number',
        :'model' => :'model',
        :'make' => :'make',
        :'hardware_revision' => :'hardware_revision',
        :'status' => :'status',
        :'status_change_reason' => :'status_change_reason',
        :'merchant_id' => :'merchant_id',
        :'account_id' => :'account_id',
        :'terminal_creation_date' => :'terminal_creation_date',
        :'terminal_updation_date' => :'terminal_updation_date',
        :'payment_processor_to_terminal_map' => :'payment_processor_to_terminal_map'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'reader_id' => :'String',
        :'serial_number' => :'String',
        :'model' => :'String',
        :'make' => :'String',
        :'hardware_revision' => :'String',
        :'status' => :'String',
        :'status_change_reason' => :'String',
        :'merchant_id' => :'String',
        :'account_id' => :'String',
        :'terminal_creation_date' => :'DateTime',
        :'terminal_updation_date' => :'DateTime',
        :'payment_processor_to_terminal_map' => :'InlineResponse2006PaymentProcessorToTerminalMap'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'readerId')
        self.reader_id = attributes[:'readerId']
      end

      if attributes.has_key?(:'serialNumber')
        self.serial_number = attributes[:'serialNumber']
      end

      if attributes.has_key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.has_key?(:'make')
        self.make = attributes[:'make']
      end

      if attributes.has_key?(:'hardwareRevision')
        self.hardware_revision = attributes[:'hardwareRevision']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'statusChangeReason')
        self.status_change_reason = attributes[:'statusChangeReason']
      end

      if attributes.has_key?(:'merchantId')
        self.merchant_id = attributes[:'merchantId']
      end

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'terminalCreationDate')
        self.terminal_creation_date = attributes[:'terminalCreationDate']
      end

      if attributes.has_key?(:'terminalUpdationDate')
        self.terminal_updation_date = attributes[:'terminalUpdationDate']
      end

      if attributes.has_key?(:'paymentProcessorToTerminalMap')
        self.payment_processor_to_terminal_map = attributes[:'paymentProcessorToTerminalMap']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      #if !@serial_number.nil? && @serial_number !~ Regexp.new(/[0-9a-zA-Z][0-9a-zA-Z-]*/)
        #invalid_properties.push('invalid value for "serial_number", must conform to the pattern /[0-9a-zA-Z][0-9a-zA-Z-]*/.')
      #end

      #if !@model.nil? && @model !~ Regexp.new(/^[0-9a-zA-Z_ ]*$/)
        #invalid_properties.push('invalid value for "model", must conform to the pattern /^[0-9a-zA-Z_ ]*$/.')
      #end

      #if !@make.nil? && @make !~ Regexp.new(/^[0-9a-zA-Z_ ]*$/)
        #invalid_properties.push('invalid value for "make", must conform to the pattern /^[0-9a-zA-Z_ ]*$/.')
      #end

      #if !@hardware_revision.nil? && @hardware_revision !~ Regexp.new(/^[0-9a-zA-Z][0-9a-zA-Z-\/_.]*$/)
        #invalid_properties.push('invalid value for "hardware_revision", must conform to the pattern /^[0-9a-zA-Z][0-9a-zA-Z-\/_.]*$/.')
      #end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      #return false if !@serial_number.nil? && @serial_number !~ Regexp.new(/[0-9a-zA-Z][0-9a-zA-Z-]*/)
      #return false if !@model.nil? && @model !~ Regexp.new(/^[0-9a-zA-Z_ ]*$/)
      #return false if !@make.nil? && @make !~ Regexp.new(/^[0-9a-zA-Z_ ]*$/)
      #return false if !@hardware_revision.nil? && @hardware_revision !~ Regexp.new(/^[0-9a-zA-Z][0-9a-zA-Z-\/_.]*$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] reader_id Value to be assigned
    def reader_id=(reader_id)
      @reader_id = reader_id
    end

    # Custom attribute writer method with validation
    # @param [Object] serial_number Value to be assigned
    def serial_number=(serial_number)
      #if !serial_number.nil? && serial_number !~ Regexp.new(/[0-9a-zA-Z][0-9a-zA-Z-]*/)
        #fail ArgumentError, 'invalid value for "serial_number", must conform to the pattern /[0-9a-zA-Z][0-9a-zA-Z-]*/.'
      #end

      @serial_number = serial_number
    end

    # Custom attribute writer method with validation
    # @param [Object] model Value to be assigned
    def model=(model)
      #if !model.nil? && model !~ Regexp.new(/^[0-9a-zA-Z_ ]*$/)
        #fail ArgumentError, 'invalid value for "model", must conform to the pattern /^[0-9a-zA-Z_ ]*$/.'
      #end

      @model = model
    end

    # Custom attribute writer method with validation
    # @param [Object] make Value to be assigned
    def make=(make)
      #if !make.nil? && make !~ Regexp.new(/^[0-9a-zA-Z_ ]*$/)
        #fail ArgumentError, 'invalid value for "make", must conform to the pattern /^[0-9a-zA-Z_ ]*$/.'
      #end

      @make = make
    end

    # Custom attribute writer method with validation
    # @param [Object] hardware_revision Value to be assigned
    def hardware_revision=(hardware_revision)
      #if !hardware_revision.nil? && hardware_revision !~ Regexp.new(/^[0-9a-zA-Z][0-9a-zA-Z-\/_.]*$/)
        #fail ArgumentError, 'invalid value for "hardware_revision", must conform to the pattern /^[0-9a-zA-Z][0-9a-zA-Z-\/_.]*$/.'
      #end

      @hardware_revision = hardware_revision
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          reader_id == o.reader_id &&
          serial_number == o.serial_number &&
          model == o.model &&
          make == o.make &&
          hardware_revision == o.hardware_revision &&
          status == o.status &&
          status_change_reason == o.status_change_reason &&
          merchant_id == o.merchant_id &&
          account_id == o.account_id &&
          terminal_creation_date == o.terminal_creation_date &&
          terminal_updation_date == o.terminal_updation_date &&
          payment_processor_to_terminal_map == o.payment_processor_to_terminal_map
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [reader_id, serial_number, model, make, hardware_revision, status, status_change_reason, merchant_id, account_id, terminal_creation_date, terminal_updation_date, payment_processor_to_terminal_map].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
