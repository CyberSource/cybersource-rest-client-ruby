=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class TmsBinLookupPaymentAccountInformationFeatures
    # This field contains the account funding source. Possible values:   - `CREDIT`   - `DEBIT`   - `PREPAID`   - `DEFERRED DEBIT`   - `CHARGE` 
    attr_accessor :account_funding_source

    # This field contains the type of prepaid card. Possible values:   - `Reloadable`   - `Non-reloadable` 
    attr_accessor :account_funding_source_sub_type

    # This field contains the type of issuer product. Example values:   - Visa Classic   - Visa Signature   - Visa Infinite 
    attr_accessor :card_product

    # This field contains the type of BIN based authentication. Possible values:   - `S`: Single Message   - `D`: Dual Message 
    attr_accessor :message_type

    # This field contains the acceptance level of the PAN. Possible values:   - `0` : Normal   - `1` : Monitor   - `2` : Refuse   - `3` : Not Allowed   - `4` : Private   - `5` : Test 
    attr_accessor :acceptance_level

    # This field contains the type of card platform. Possible values:   - `BUSINESS`   - `CONSUMER`   - `CORPORATE`   - `COMMERCIAL`   - `GOVERNMENT` 
    attr_accessor :card_platform

    # This field indicates the type of combo card. Possible values:   - 0 (Not a combo card)   - 1 (Credit and Prepaid Combo card)   - 2 (Credit and Debit Combo card) 
    attr_accessor :combo_card

    # This field indicates if the instrument can be used for corporate purchasing. This field is only applicable for American Express cards. Possible values:   - `true`   - `false` 
    attr_accessor :corporate_purchase

    # This field indicates if the BIN is for healthcare (HSA/FSA). Currently, this field is only supported for Visa BINs. Possible values:     - `true`     - `false` 
    attr_accessor :health_card

    # This field indicates if the BIN is shared by multiple issuers Possible values:     - `true`     - `false` 
    attr_accessor :shared_bin

    # This field indicates if the BIN is valid only for POS domestic usage. Possible values:     - `true`     - `false` 
    attr_accessor :pos_domestic_only

    # This field indicates if gambling transactions are allowed on the BIN. Possible values:     - `true`     - `false` 
    attr_accessor :gambling_allowed

    # This field indicates if a transaction on the instrument qualifies for level 2 interchange rates. Possible values:     - `true`     - `false` 
    attr_accessor :commercial_card_level2

    # This field indicates if a transaction on the instrument qualifies for level 3 interchange rates. Possible values:     - `true`     - `false` 
    attr_accessor :commercial_card_level3

    # This field indicates if a transaction on the instrument qualifies for government exempt interchange fee. Possible values:     - `true`     - `false` 
    attr_accessor :exempt_bin

    # This field indicates if the BIN participates in Account Level Management (ALM). Possible values:     - `true`     - `false` 
    attr_accessor :account_level_management

    # This field indicates if online gambling is blocked on the BIN. Possible values:     - `true`     - `false` 
    attr_accessor :online_gambling_block

    # This field indicates if auto-substantiation is enabled on the BIN. Possible values:     - `true`     - `false` 
    attr_accessor :auto_substantiation

    # This field indicates if the instrument is a flex credential. Possible values:     - `true`     - `false` 
    attr_accessor :flex_credential

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_funding_source' => :'accountFundingSource',
        :'account_funding_source_sub_type' => :'accountFundingSourceSubType',
        :'card_product' => :'cardProduct',
        :'message_type' => :'messageType',
        :'acceptance_level' => :'acceptanceLevel',
        :'card_platform' => :'cardPlatform',
        :'combo_card' => :'comboCard',
        :'corporate_purchase' => :'corporatePurchase',
        :'health_card' => :'healthCard',
        :'shared_bin' => :'sharedBIN',
        :'pos_domestic_only' => :'posDomesticOnly',
        :'gambling_allowed' => :'gamblingAllowed',
        :'commercial_card_level2' => :'commercialCardLevel2',
        :'commercial_card_level3' => :'commercialCardLevel3',
        :'exempt_bin' => :'exemptBIN',
        :'account_level_management' => :'accountLevelManagement',
        :'online_gambling_block' => :'onlineGamblingBlock',
        :'auto_substantiation' => :'autoSubstantiation',
        :'flex_credential' => :'flexCredential'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'account_funding_source' => :'account_funding_source',
        :'account_funding_source_sub_type' => :'account_funding_source_sub_type',
        :'card_product' => :'card_product',
        :'message_type' => :'message_type',
        :'acceptance_level' => :'acceptance_level',
        :'card_platform' => :'card_platform',
        :'combo_card' => :'combo_card',
        :'corporate_purchase' => :'corporate_purchase',
        :'health_card' => :'health_card',
        :'shared_bin' => :'shared_bin',
        :'pos_domestic_only' => :'pos_domestic_only',
        :'gambling_allowed' => :'gambling_allowed',
        :'commercial_card_level2' => :'commercial_card_level2',
        :'commercial_card_level3' => :'commercial_card_level3',
        :'exempt_bin' => :'exempt_bin',
        :'account_level_management' => :'account_level_management',
        :'online_gambling_block' => :'online_gambling_block',
        :'auto_substantiation' => :'auto_substantiation',
        :'flex_credential' => :'flex_credential'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account_funding_source' => :'String',
        :'account_funding_source_sub_type' => :'String',
        :'card_product' => :'String',
        :'message_type' => :'String',
        :'acceptance_level' => :'String',
        :'card_platform' => :'String',
        :'combo_card' => :'String',
        :'corporate_purchase' => :'BOOLEAN',
        :'health_card' => :'BOOLEAN',
        :'shared_bin' => :'BOOLEAN',
        :'pos_domestic_only' => :'BOOLEAN',
        :'gambling_allowed' => :'BOOLEAN',
        :'commercial_card_level2' => :'BOOLEAN',
        :'commercial_card_level3' => :'BOOLEAN',
        :'exempt_bin' => :'BOOLEAN',
        :'account_level_management' => :'BOOLEAN',
        :'online_gambling_block' => :'BOOLEAN',
        :'auto_substantiation' => :'BOOLEAN',
        :'flex_credential' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'accountFundingSource')
        self.account_funding_source = attributes[:'accountFundingSource']
      end

      if attributes.has_key?(:'accountFundingSourceSubType')
        self.account_funding_source_sub_type = attributes[:'accountFundingSourceSubType']
      end

      if attributes.has_key?(:'cardProduct')
        self.card_product = attributes[:'cardProduct']
      end

      if attributes.has_key?(:'messageType')
        self.message_type = attributes[:'messageType']
      end

      if attributes.has_key?(:'acceptanceLevel')
        self.acceptance_level = attributes[:'acceptanceLevel']
      end

      if attributes.has_key?(:'cardPlatform')
        self.card_platform = attributes[:'cardPlatform']
      end

      if attributes.has_key?(:'comboCard')
        self.combo_card = attributes[:'comboCard']
      end

      if attributes.has_key?(:'corporatePurchase')
        self.corporate_purchase = attributes[:'corporatePurchase']
      end

      if attributes.has_key?(:'healthCard')
        self.health_card = attributes[:'healthCard']
      end

      if attributes.has_key?(:'sharedBIN')
        self.shared_bin = attributes[:'sharedBIN']
      end

      if attributes.has_key?(:'posDomesticOnly')
        self.pos_domestic_only = attributes[:'posDomesticOnly']
      end

      if attributes.has_key?(:'gamblingAllowed')
        self.gambling_allowed = attributes[:'gamblingAllowed']
      end

      if attributes.has_key?(:'commercialCardLevel2')
        self.commercial_card_level2 = attributes[:'commercialCardLevel2']
      end

      if attributes.has_key?(:'commercialCardLevel3')
        self.commercial_card_level3 = attributes[:'commercialCardLevel3']
      end

      if attributes.has_key?(:'exemptBIN')
        self.exempt_bin = attributes[:'exemptBIN']
      end

      if attributes.has_key?(:'accountLevelManagement')
        self.account_level_management = attributes[:'accountLevelManagement']
      end

      if attributes.has_key?(:'onlineGamblingBlock')
        self.online_gambling_block = attributes[:'onlineGamblingBlock']
      end

      if attributes.has_key?(:'autoSubstantiation')
        self.auto_substantiation = attributes[:'autoSubstantiation']
      end

      if attributes.has_key?(:'flexCredential')
        self.flex_credential = attributes[:'flexCredential']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account_funding_source Value to be assigned
    def account_funding_source=(account_funding_source)
      @account_funding_source = account_funding_source
    end

    # Custom attribute writer method with validation
    # @param [Object] account_funding_source_sub_type Value to be assigned
    def account_funding_source_sub_type=(account_funding_source_sub_type)
      @account_funding_source_sub_type = account_funding_source_sub_type
    end

    # Custom attribute writer method with validation
    # @param [Object] card_product Value to be assigned
    def card_product=(card_product)
      @card_product = card_product
    end

    # Custom attribute writer method with validation
    # @param [Object] message_type Value to be assigned
    def message_type=(message_type)
      @message_type = message_type
    end

    # Custom attribute writer method with validation
    # @param [Object] acceptance_level Value to be assigned
    def acceptance_level=(acceptance_level)
      @acceptance_level = acceptance_level
    end

    # Custom attribute writer method with validation
    # @param [Object] card_platform Value to be assigned
    def card_platform=(card_platform)
      @card_platform = card_platform
    end

    # Custom attribute writer method with validation
    # @param [Object] combo_card Value to be assigned
    def combo_card=(combo_card)
      @combo_card = combo_card
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_funding_source == o.account_funding_source &&
          account_funding_source_sub_type == o.account_funding_source_sub_type &&
          card_product == o.card_product &&
          message_type == o.message_type &&
          acceptance_level == o.acceptance_level &&
          card_platform == o.card_platform &&
          combo_card == o.combo_card &&
          corporate_purchase == o.corporate_purchase &&
          health_card == o.health_card &&
          shared_bin == o.shared_bin &&
          pos_domestic_only == o.pos_domestic_only &&
          gambling_allowed == o.gambling_allowed &&
          commercial_card_level2 == o.commercial_card_level2 &&
          commercial_card_level3 == o.commercial_card_level3 &&
          exempt_bin == o.exempt_bin &&
          account_level_management == o.account_level_management &&
          online_gambling_block == o.online_gambling_block &&
          auto_substantiation == o.auto_substantiation &&
          flex_credential == o.flex_credential
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_funding_source, account_funding_source_sub_type, card_product, message_type, acceptance_level, card_platform, combo_card, corporate_purchase, health_card, shared_bin, pos_domestic_only, gambling_allowed, commercial_card_level2, commercial_card_level3, exempt_bin, account_level_management, online_gambling_block, auto_substantiation, flex_credential].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
