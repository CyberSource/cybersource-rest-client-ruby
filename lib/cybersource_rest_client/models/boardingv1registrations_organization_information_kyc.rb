=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Boardingv1registrationsOrganizationInformationKYC
    attr_accessor :when_is_customer_charged

    attr_accessor :when_is_customer_charged_description

    attr_accessor :offer_subscriptions

    attr_accessor :monthly_subscription_percent

    attr_accessor :quarterly_subscription_percent

    attr_accessor :semi_annual_subscription_percent

    attr_accessor :annual_subscription_percent

    attr_accessor :time_to_product_delivery

    attr_accessor :estimated_monthly_sales

    attr_accessor :average_order_amount

    attr_accessor :largest_expected_order_amount

    attr_accessor :deposit_bank_account

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'when_is_customer_charged' => :'whenIsCustomerCharged',
        :'when_is_customer_charged_description' => :'whenIsCustomerChargedDescription',
        :'offer_subscriptions' => :'offerSubscriptions',
        :'monthly_subscription_percent' => :'monthlySubscriptionPercent',
        :'quarterly_subscription_percent' => :'quarterlySubscriptionPercent',
        :'semi_annual_subscription_percent' => :'semiAnnualSubscriptionPercent',
        :'annual_subscription_percent' => :'annualSubscriptionPercent',
        :'time_to_product_delivery' => :'timeToProductDelivery',
        :'estimated_monthly_sales' => :'estimatedMonthlySales',
        :'average_order_amount' => :'averageOrderAmount',
        :'largest_expected_order_amount' => :'largestExpectedOrderAmount',
        :'deposit_bank_account' => :'depositBankAccount'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'when_is_customer_charged' => :'when_is_customer_charged',
        :'when_is_customer_charged_description' => :'when_is_customer_charged_description',
        :'offer_subscriptions' => :'offer_subscriptions',
        :'monthly_subscription_percent' => :'monthly_subscription_percent',
        :'quarterly_subscription_percent' => :'quarterly_subscription_percent',
        :'semi_annual_subscription_percent' => :'semi_annual_subscription_percent',
        :'annual_subscription_percent' => :'annual_subscription_percent',
        :'time_to_product_delivery' => :'time_to_product_delivery',
        :'estimated_monthly_sales' => :'estimated_monthly_sales',
        :'average_order_amount' => :'average_order_amount',
        :'largest_expected_order_amount' => :'largest_expected_order_amount',
        :'deposit_bank_account' => :'deposit_bank_account'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'when_is_customer_charged' => :'String',
        :'when_is_customer_charged_description' => :'String',
        :'offer_subscriptions' => :'BOOLEAN',
        :'monthly_subscription_percent' => :'Float',
        :'quarterly_subscription_percent' => :'Float',
        :'semi_annual_subscription_percent' => :'Float',
        :'annual_subscription_percent' => :'Float',
        :'time_to_product_delivery' => :'String',
        :'estimated_monthly_sales' => :'Float',
        :'average_order_amount' => :'Float',
        :'largest_expected_order_amount' => :'Float',
        :'deposit_bank_account' => :'Boardingv1registrationsOrganizationInformationKYCDepositBankAccount'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'whenIsCustomerCharged')
        self.when_is_customer_charged = attributes[:'whenIsCustomerCharged']
      end

      if attributes.has_key?(:'whenIsCustomerChargedDescription')
        self.when_is_customer_charged_description = attributes[:'whenIsCustomerChargedDescription']
      end

      if attributes.has_key?(:'offerSubscriptions')
        self.offer_subscriptions = attributes[:'offerSubscriptions']
      end

      if attributes.has_key?(:'monthlySubscriptionPercent')
        self.monthly_subscription_percent = attributes[:'monthlySubscriptionPercent']
      end

      if attributes.has_key?(:'quarterlySubscriptionPercent')
        self.quarterly_subscription_percent = attributes[:'quarterlySubscriptionPercent']
      end

      if attributes.has_key?(:'semiAnnualSubscriptionPercent')
        self.semi_annual_subscription_percent = attributes[:'semiAnnualSubscriptionPercent']
      end

      if attributes.has_key?(:'annualSubscriptionPercent')
        self.annual_subscription_percent = attributes[:'annualSubscriptionPercent']
      end

      if attributes.has_key?(:'timeToProductDelivery')
        self.time_to_product_delivery = attributes[:'timeToProductDelivery']
      end

      if attributes.has_key?(:'estimatedMonthlySales')
        self.estimated_monthly_sales = attributes[:'estimatedMonthlySales']
      end

      if attributes.has_key?(:'averageOrderAmount')
        self.average_order_amount = attributes[:'averageOrderAmount']
      end

      if attributes.has_key?(:'largestExpectedOrderAmount')
        self.largest_expected_order_amount = attributes[:'largestExpectedOrderAmount']
      end

      if attributes.has_key?(:'depositBankAccount')
        self.deposit_bank_account = attributes[:'depositBankAccount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @when_is_customer_charged.nil?
        invalid_properties.push('invalid value for "when_is_customer_charged", when_is_customer_charged cannot be nil.')
      end

      if @offer_subscriptions.nil?
        invalid_properties.push('invalid value for "offer_subscriptions", offer_subscriptions cannot be nil.')
      end

      if @time_to_product_delivery.nil?
        invalid_properties.push('invalid value for "time_to_product_delivery", time_to_product_delivery cannot be nil.')
      end

      if @estimated_monthly_sales.nil?
        invalid_properties.push('invalid value for "estimated_monthly_sales", estimated_monthly_sales cannot be nil.')
      end

      if @average_order_amount.nil?
        invalid_properties.push('invalid value for "average_order_amount", average_order_amount cannot be nil.')
      end

      if @largest_expected_order_amount.nil?
        invalid_properties.push('invalid value for "largest_expected_order_amount", largest_expected_order_amount cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @when_is_customer_charged.nil?
      when_is_customer_charged_validator = EnumAttributeValidator.new('String', ['ONETIMEBEFORE', 'ONETIMEAFTER', 'OTHER'])
      return false unless when_is_customer_charged_validator.valid?(@when_is_customer_charged)
      return false if @offer_subscriptions.nil?
      return false if @time_to_product_delivery.nil?
      time_to_product_delivery_validator = EnumAttributeValidator.new('String', ['INSTANT', 'UPTO2', 'UPTO5', 'UPTO10', 'GREATERTHAN10'])
      return false unless time_to_product_delivery_validator.valid?(@time_to_product_delivery)
      return false if @estimated_monthly_sales.nil?
      return false if @average_order_amount.nil?
      return false if @largest_expected_order_amount.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] when_is_customer_charged Object to be assigned
    def when_is_customer_charged=(when_is_customer_charged)
      validator = EnumAttributeValidator.new('String', ['ONETIMEBEFORE', 'ONETIMEAFTER', 'OTHER'])
      unless validator.valid?(when_is_customer_charged)
        fail ArgumentError, 'invalid value for "when_is_customer_charged", must be one of #{validator.allowable_values}.'
      end
      @when_is_customer_charged = when_is_customer_charged
    end

    # Custom attribute writer method with validation
    # @param [Object] when_is_customer_charged_description Value to be assigned
    def when_is_customer_charged_description=(when_is_customer_charged_description)
      @when_is_customer_charged_description = when_is_customer_charged_description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_to_product_delivery Object to be assigned
    def time_to_product_delivery=(time_to_product_delivery)
      validator = EnumAttributeValidator.new('String', ['INSTANT', 'UPTO2', 'UPTO5', 'UPTO10', 'GREATERTHAN10'])
      unless validator.valid?(time_to_product_delivery)
        fail ArgumentError, 'invalid value for "time_to_product_delivery", must be one of #{validator.allowable_values}.'
      end
      @time_to_product_delivery = time_to_product_delivery
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          when_is_customer_charged == o.when_is_customer_charged &&
          when_is_customer_charged_description == o.when_is_customer_charged_description &&
          offer_subscriptions == o.offer_subscriptions &&
          monthly_subscription_percent == o.monthly_subscription_percent &&
          quarterly_subscription_percent == o.quarterly_subscription_percent &&
          semi_annual_subscription_percent == o.semi_annual_subscription_percent &&
          annual_subscription_percent == o.annual_subscription_percent &&
          time_to_product_delivery == o.time_to_product_delivery &&
          estimated_monthly_sales == o.estimated_monthly_sales &&
          average_order_amount == o.average_order_amount &&
          largest_expected_order_amount == o.largest_expected_order_amount &&
          deposit_bank_account == o.deposit_bank_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [when_is_customer_charged, when_is_customer_charged_description, offer_subscriptions, monthly_subscription_percent, quarterly_subscription_percent, semi_annual_subscription_percent, annual_subscription_percent, time_to_product_delivery, estimated_monthly_sales, average_order_amount, largest_expected_order_amount, deposit_bank_account].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
