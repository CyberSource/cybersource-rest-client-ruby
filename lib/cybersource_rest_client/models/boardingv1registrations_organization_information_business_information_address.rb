=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Boardingv1registrationsOrganizationInformationBusinessInformationAddress
    attr_accessor :country

    attr_accessor :address1

    attr_accessor :address2

    # City of the billing address.
    attr_accessor :locality

    # State or province of the billing address. Required for United States and Canada.
    attr_accessor :administrative_area

    # Postal code for the billing address. The postal code must consist of 5 to 9 digits. Required for United States and Canada.
    attr_accessor :postal_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'country' => :'country',
        :'address1' => :'address1',
        :'address2' => :'address2',
        :'locality' => :'locality',
        :'administrative_area' => :'administrativeArea',
        :'postal_code' => :'postalCode'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'country' => :'country',
        :'address1' => :'address1',
        :'address2' => :'address2',
        :'locality' => :'locality',
        :'administrative_area' => :'administrative_area',
        :'postal_code' => :'postal_code'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'country' => :'String',
        :'address1' => :'String',
        :'address2' => :'String',
        :'locality' => :'String',
        :'administrative_area' => :'String',
        :'postal_code' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'address1')
        self.address1 = attributes[:'address1']
      end

      if attributes.has_key?(:'address2')
        self.address2 = attributes[:'address2']
      end

      if attributes.has_key?(:'locality')
        self.locality = attributes[:'locality']
      end

      if attributes.has_key?(:'administrativeArea')
        self.administrative_area = attributes[:'administrativeArea']
      end

      if attributes.has_key?(:'postalCode')
        self.postal_code = attributes[:'postalCode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @country.nil?
        invalid_properties.push('invalid value for "country", country cannot be nil.')
      end

      #if @country !~ Regexp.new(/^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/)
        #invalid_properties.push('invalid value for "country", must conform to the pattern /^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/.')
      #end

      if @address1.nil?
        invalid_properties.push('invalid value for "address1", address1 cannot be nil.')
      end

      #if @address1 !~ Regexp.new(/^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/)
        #invalid_properties.push('invalid value for "address1", must conform to the pattern /^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/.')
      #end

      #if !@address2.nil? && @address2 !~ Regexp.new(/^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/)
        #invalid_properties.push('invalid value for "address2", must conform to the pattern /^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/.')
      #end

      if @locality.nil?
        invalid_properties.push('invalid value for "locality", locality cannot be nil.')
      end

      #if @locality !~ Regexp.new(/^[0-9a-zA-Z _\\-¡-￿]+$/)
        #invalid_properties.push('invalid value for "locality", must conform to the pattern /^[0-9a-zA-Z _\\-¡-￿]+$/.')
      #end

      #if !@administrative_area.nil? && @administrative_area !~ Regexp.new(/^[0-9a-zA-Z¡-￿ ]*$/)
        #invalid_properties.push('invalid value for "administrative_area", must conform to the pattern /^[0-9a-zA-Z¡-￿ ]*$/.')
      #end

      #if !@postal_code.nil? && @postal_code !~ Regexp.new(/^[0-9a-zA-Z ]*$/)
        #invalid_properties.push('invalid value for "postal_code", must conform to the pattern /^[0-9a-zA-Z ]*$/.')
      #end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @country.nil?
      #return false if @country !~ Regexp.new(/^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/)
      return false if @address1.nil?
      #return false if @address1 !~ Regexp.new(/^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/)
      #return false if !@address2.nil? && @address2 !~ Regexp.new(/^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/)
      return false if @locality.nil?
      #return false if @locality !~ Regexp.new(/^[0-9a-zA-Z _\\-¡-￿]+$/)
      #return false if !@administrative_area.nil? && @administrative_area !~ Regexp.new(/^[0-9a-zA-Z¡-￿ ]*$/)
      #return false if !@postal_code.nil? && @postal_code !~ Regexp.new(/^[0-9a-zA-Z ]*$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if country.nil?
        fail ArgumentError, 'country cannot be nil'
      end

      #if country !~ Regexp.new(/^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/)
        #fail ArgumentError, 'invalid value for "country", must conform to the pattern /^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/.'
      #end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] address1 Value to be assigned
    def address1=(address1)
      if address1.nil?
        fail ArgumentError, 'address1 cannot be nil'
      end

      #if address1 !~ Regexp.new(/^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/)
        #fail ArgumentError, 'invalid value for "address1", must conform to the pattern /^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/.'
      #end

      @address1 = address1
    end

    # Custom attribute writer method with validation
    # @param [Object] address2 Value to be assigned
    def address2=(address2)
      #if !address2.nil? && address2 !~ Regexp.new(/^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/)
        #fail ArgumentError, 'invalid value for "address2", must conform to the pattern /^[À-ÖØ-öø-ǿa-zA-Z0-9().\\-_#,;\/@$:!% ]{1,}$/.'
      #end

      @address2 = address2
    end

    # Custom attribute writer method with validation
    # @param [Object] locality Value to be assigned
    def locality=(locality)
      if locality.nil?
        fail ArgumentError, 'locality cannot be nil'
      end

      #if locality !~ Regexp.new(/^[0-9a-zA-Z _\\-¡-￿]+$/)
        #fail ArgumentError, 'invalid value for "locality", must conform to the pattern /^[0-9a-zA-Z _\\-¡-￿]+$/.'
      #end

      @locality = locality
    end

    # Custom attribute writer method with validation
    # @param [Object] administrative_area Value to be assigned
    def administrative_area=(administrative_area)
      #if !administrative_area.nil? && administrative_area !~ Regexp.new(/^[0-9a-zA-Z¡-￿ ]*$/)
        #fail ArgumentError, 'invalid value for "administrative_area", must conform to the pattern /^[0-9a-zA-Z¡-￿ ]*$/.'
      #end

      @administrative_area = administrative_area
    end

    # Custom attribute writer method with validation
    # @param [Object] postal_code Value to be assigned
    def postal_code=(postal_code)
      #if !postal_code.nil? && postal_code !~ Regexp.new(/^[0-9a-zA-Z ]*$/)
        #fail ArgumentError, 'invalid value for "postal_code", must conform to the pattern /^[0-9a-zA-Z ]*$/.'
      #end

      @postal_code = postal_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          country == o.country &&
          address1 == o.address1 &&
          address2 == o.address2 &&
          locality == o.locality &&
          administrative_area == o.administrative_area &&
          postal_code == o.postal_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [country, address1, address2, locality, administrative_area, postal_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
