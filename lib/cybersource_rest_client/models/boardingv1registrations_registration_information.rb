=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Boardingv1registrationsRegistrationInformation
    attr_accessor :boarding_registration_id

    # Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. 
    attr_accessor :submit_time_utc

    # The status of Registration request Possible Values:   - 'PROCESSING': This status is for Registrations that are still in Progress, you can get the latest status by calling the GET endpoint using the Registration Id   - 'SUCCESS': This status is for Registrations that were successfull on every step of the on boarding process.   - 'FAILURE': This status is for Registrations that fail before the Organization was created; please refer to the details section in the reponse for more information.   - 'PARTIAL': This status is for Registrations that created the Organization successfully but fail in at least on step while configuring it; please refer to the details section in the response for more information. 
    attr_accessor :status

    attr_accessor :boarding_package_id

    # Determines the boarding flow for this registration. Possible Values:   - 'ENTERPRISE'   - 'SMB'   - 'ADDPRODUCT' 
    attr_accessor :boarding_flow

    # In case mode is not provided the API will use COMPLETE as default Possible Values:   - 'COMPLETE'   - 'PARTIAL' 
    attr_accessor :mode

    attr_accessor :sales_rep_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'boarding_registration_id' => :'boardingRegistrationId',
        :'submit_time_utc' => :'submitTimeUtc',
        :'status' => :'status',
        :'boarding_package_id' => :'boardingPackageId',
        :'boarding_flow' => :'boardingFlow',
        :'mode' => :'mode',
        :'sales_rep_id' => :'salesRepId'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'boarding_registration_id' => :'boarding_registration_id',
        :'submit_time_utc' => :'submit_time_utc',
        :'status' => :'status',
        :'boarding_package_id' => :'boarding_package_id',
        :'boarding_flow' => :'boarding_flow',
        :'mode' => :'mode',
        :'sales_rep_id' => :'sales_rep_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'boarding_registration_id' => :'String',
        :'submit_time_utc' => :'Date',
        :'status' => :'String',
        :'boarding_package_id' => :'String',
        :'boarding_flow' => :'String',
        :'mode' => :'String',
        :'sales_rep_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'boardingRegistrationId')
        self.boarding_registration_id = attributes[:'boardingRegistrationId']
      end

      if attributes.has_key?(:'submitTimeUtc')
        self.submit_time_utc = attributes[:'submitTimeUtc']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'boardingPackageId')
        self.boarding_package_id = attributes[:'boardingPackageId']
      end

      if attributes.has_key?(:'boardingFlow')
        self.boarding_flow = attributes[:'boardingFlow']
      end

      if attributes.has_key?(:'mode')
        self.mode = attributes[:'mode']
      end

      if attributes.has_key?(:'salesRepId')
        self.sales_rep_id = attributes[:'salesRepId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['PROCESSING', 'SUCCESS', 'FAILURE', 'PARTIAL'])
      return false unless status_validator.valid?(@status)
      boarding_flow_validator = EnumAttributeValidator.new('String', ['ENTERPRISE', 'SMB', 'ADDPRODUCT'])
      return false unless boarding_flow_validator.valid?(@boarding_flow)
      mode_validator = EnumAttributeValidator.new('String', ['COMPLETE', 'PARTIAL'])
      return false unless mode_validator.valid?(@mode)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] boarding_registration_id Value to be assigned
    def boarding_registration_id=(boarding_registration_id)
      @boarding_registration_id = boarding_registration_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['PROCESSING', 'SUCCESS', 'FAILURE', 'PARTIAL'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] boarding_package_id Value to be assigned
    def boarding_package_id=(boarding_package_id)
      @boarding_package_id = boarding_package_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boarding_flow Object to be assigned
    def boarding_flow=(boarding_flow)
      validator = EnumAttributeValidator.new('String', ['ENTERPRISE', 'SMB', 'ADDPRODUCT'])
      unless validator.valid?(boarding_flow)
        fail ArgumentError, 'invalid value for "boarding_flow", must be one of #{validator.allowable_values}.'
      end
      @boarding_flow = boarding_flow
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode Object to be assigned
    def mode=(mode)
      validator = EnumAttributeValidator.new('String', ['COMPLETE', 'PARTIAL'])
      unless validator.valid?(mode)
        fail ArgumentError, 'invalid value for "mode", must be one of #{validator.allowable_values}.'
      end
      @mode = mode
    end

    # Custom attribute writer method with validation
    # @param [Object] sales_rep_id Value to be assigned
    def sales_rep_id=(sales_rep_id)
      @sales_rep_id = sales_rep_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          boarding_registration_id == o.boarding_registration_id &&
          submit_time_utc == o.submit_time_utc &&
          status == o.status &&
          boarding_package_id == o.boarding_package_id &&
          boarding_flow == o.boarding_flow &&
          mode == o.mode &&
          sales_rep_id == o.sales_rep_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [boarding_registration_id, submit_time_utc, status, boarding_package_id, boarding_flow, mode, sales_rep_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
