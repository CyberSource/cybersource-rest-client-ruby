=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'date'

module CyberSource
  class InlineResponse2012PayoutInformationPushFunds
    # This field indicates if cross-border money transfer OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :money_transfer_fast_funds_cross_border

    # This field indicates if domestic money transfer OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :money_transfer_fast_funds_domestic

    # This field indicates if cross-border money transfer OCTs (push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :money_transfer_cross_border

    # This field indicates if domestic money transfer OCTs (push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :money_transfer_domestic

    # This field indicates if cross-border non-money transfer OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :non_money_transfer_fast_funds_cross_border

    # This field indicates if domestic non-money transfer OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :non_money_transfer_fast_funds_domestic

    # This field indicates if cross-border non-money transfer OCTs (push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :non_money_transfer_cross_border

    # This field indicates if domestic non-money transfer OCTs (push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :non_money_transfer_domestic

    # This field indicates if cross-border gambling OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :online_gambling_fast_funds_cross_border

    # This field indicates if domestic gambling OCTs (fast push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :online_gambling_fast_funds_domestic

    # This field indicates if cross-border gambling OCTs (push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :online_gambling_cross_border

    # This field indicates if domestic gambling OCTs (push funds) are allowed. Possible values:   - `Y`   - `N` 
    attr_accessor :online_gambling_domestic

    # This field indicates if domestic OCTs (push funds) are allowed. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service(PPGS). Possible values:   - `true`   - `false` 
    attr_accessor :domestic_participant

    # This field indicates if cross-border OCTs (push funds) are allowed. Note: Supported only in US for cross-border transactions involving Push Payments Gateway Service(PPGS). Possible values:   - `true`   - `false` 
    attr_accessor :cross_border_participant

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'money_transfer_fast_funds_cross_border' => :'moneyTransferFastFundsCrossBorder',
        :'money_transfer_fast_funds_domestic' => :'moneyTransferFastFundsDomestic',
        :'money_transfer_cross_border' => :'moneyTransferCrossBorder',
        :'money_transfer_domestic' => :'moneyTransferDomestic',
        :'non_money_transfer_fast_funds_cross_border' => :'nonMoneyTransferFastFundsCrossBorder',
        :'non_money_transfer_fast_funds_domestic' => :'nonMoneyTransferFastFundsDomestic',
        :'non_money_transfer_cross_border' => :'nonMoneyTransferCrossBorder',
        :'non_money_transfer_domestic' => :'nonMoneyTransferDomestic',
        :'online_gambling_fast_funds_cross_border' => :'onlineGamblingFastFundsCrossBorder',
        :'online_gambling_fast_funds_domestic' => :'onlineGamblingFastFundsDomestic',
        :'online_gambling_cross_border' => :'onlineGamblingCrossBorder',
        :'online_gambling_domestic' => :'onlineGamblingDomestic',
        :'domestic_participant' => :'domesticParticipant',
        :'cross_border_participant' => :'crossBorderParticipant'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'money_transfer_fast_funds_cross_border' => :'money_transfer_fast_funds_cross_border',
        :'money_transfer_fast_funds_domestic' => :'money_transfer_fast_funds_domestic',
        :'money_transfer_cross_border' => :'money_transfer_cross_border',
        :'money_transfer_domestic' => :'money_transfer_domestic',
        :'non_money_transfer_fast_funds_cross_border' => :'non_money_transfer_fast_funds_cross_border',
        :'non_money_transfer_fast_funds_domestic' => :'non_money_transfer_fast_funds_domestic',
        :'non_money_transfer_cross_border' => :'non_money_transfer_cross_border',
        :'non_money_transfer_domestic' => :'non_money_transfer_domestic',
        :'online_gambling_fast_funds_cross_border' => :'online_gambling_fast_funds_cross_border',
        :'online_gambling_fast_funds_domestic' => :'online_gambling_fast_funds_domestic',
        :'online_gambling_cross_border' => :'online_gambling_cross_border',
        :'online_gambling_domestic' => :'online_gambling_domestic',
        :'domestic_participant' => :'domestic_participant',
        :'cross_border_participant' => :'cross_border_participant'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'money_transfer_fast_funds_cross_border' => :'String',
        :'money_transfer_fast_funds_domestic' => :'String',
        :'money_transfer_cross_border' => :'String',
        :'money_transfer_domestic' => :'String',
        :'non_money_transfer_fast_funds_cross_border' => :'String',
        :'non_money_transfer_fast_funds_domestic' => :'String',
        :'non_money_transfer_cross_border' => :'String',
        :'non_money_transfer_domestic' => :'String',
        :'online_gambling_fast_funds_cross_border' => :'String',
        :'online_gambling_fast_funds_domestic' => :'String',
        :'online_gambling_cross_border' => :'String',
        :'online_gambling_domestic' => :'String',
        :'domestic_participant' => :'String',
        :'cross_border_participant' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'moneyTransferFastFundsCrossBorder')
        self.money_transfer_fast_funds_cross_border = attributes[:'moneyTransferFastFundsCrossBorder']
      end

      if attributes.has_key?(:'moneyTransferFastFundsDomestic')
        self.money_transfer_fast_funds_domestic = attributes[:'moneyTransferFastFundsDomestic']
      end

      if attributes.has_key?(:'moneyTransferCrossBorder')
        self.money_transfer_cross_border = attributes[:'moneyTransferCrossBorder']
      end

      if attributes.has_key?(:'moneyTransferDomestic')
        self.money_transfer_domestic = attributes[:'moneyTransferDomestic']
      end

      if attributes.has_key?(:'nonMoneyTransferFastFundsCrossBorder')
        self.non_money_transfer_fast_funds_cross_border = attributes[:'nonMoneyTransferFastFundsCrossBorder']
      end

      if attributes.has_key?(:'nonMoneyTransferFastFundsDomestic')
        self.non_money_transfer_fast_funds_domestic = attributes[:'nonMoneyTransferFastFundsDomestic']
      end

      if attributes.has_key?(:'nonMoneyTransferCrossBorder')
        self.non_money_transfer_cross_border = attributes[:'nonMoneyTransferCrossBorder']
      end

      if attributes.has_key?(:'nonMoneyTransferDomestic')
        self.non_money_transfer_domestic = attributes[:'nonMoneyTransferDomestic']
      end

      if attributes.has_key?(:'onlineGamblingFastFundsCrossBorder')
        self.online_gambling_fast_funds_cross_border = attributes[:'onlineGamblingFastFundsCrossBorder']
      end

      if attributes.has_key?(:'onlineGamblingFastFundsDomestic')
        self.online_gambling_fast_funds_domestic = attributes[:'onlineGamblingFastFundsDomestic']
      end

      if attributes.has_key?(:'onlineGamblingCrossBorder')
        self.online_gambling_cross_border = attributes[:'onlineGamblingCrossBorder']
      end

      if attributes.has_key?(:'onlineGamblingDomestic')
        self.online_gambling_domestic = attributes[:'onlineGamblingDomestic']
      end

      if attributes.has_key?(:'domesticParticipant')
        self.domestic_participant = attributes[:'domesticParticipant']
      end

      if attributes.has_key?(:'crossBorderParticipant')
        self.cross_border_participant = attributes[:'crossBorderParticipant']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] money_transfer_fast_funds_cross_border Value to be assigned
    def money_transfer_fast_funds_cross_border=(money_transfer_fast_funds_cross_border)
      @money_transfer_fast_funds_cross_border = money_transfer_fast_funds_cross_border
    end

    # Custom attribute writer method with validation
    # @param [Object] money_transfer_fast_funds_domestic Value to be assigned
    def money_transfer_fast_funds_domestic=(money_transfer_fast_funds_domestic)
      @money_transfer_fast_funds_domestic = money_transfer_fast_funds_domestic
    end

    # Custom attribute writer method with validation
    # @param [Object] money_transfer_cross_border Value to be assigned
    def money_transfer_cross_border=(money_transfer_cross_border)
      @money_transfer_cross_border = money_transfer_cross_border
    end

    # Custom attribute writer method with validation
    # @param [Object] money_transfer_domestic Value to be assigned
    def money_transfer_domestic=(money_transfer_domestic)
      @money_transfer_domestic = money_transfer_domestic
    end

    # Custom attribute writer method with validation
    # @param [Object] non_money_transfer_fast_funds_cross_border Value to be assigned
    def non_money_transfer_fast_funds_cross_border=(non_money_transfer_fast_funds_cross_border)
      @non_money_transfer_fast_funds_cross_border = non_money_transfer_fast_funds_cross_border
    end

    # Custom attribute writer method with validation
    # @param [Object] non_money_transfer_fast_funds_domestic Value to be assigned
    def non_money_transfer_fast_funds_domestic=(non_money_transfer_fast_funds_domestic)
      @non_money_transfer_fast_funds_domestic = non_money_transfer_fast_funds_domestic
    end

    # Custom attribute writer method with validation
    # @param [Object] non_money_transfer_cross_border Value to be assigned
    def non_money_transfer_cross_border=(non_money_transfer_cross_border)
      @non_money_transfer_cross_border = non_money_transfer_cross_border
    end

    # Custom attribute writer method with validation
    # @param [Object] non_money_transfer_domestic Value to be assigned
    def non_money_transfer_domestic=(non_money_transfer_domestic)
      @non_money_transfer_domestic = non_money_transfer_domestic
    end

    # Custom attribute writer method with validation
    # @param [Object] online_gambling_fast_funds_cross_border Value to be assigned
    def online_gambling_fast_funds_cross_border=(online_gambling_fast_funds_cross_border)
      @online_gambling_fast_funds_cross_border = online_gambling_fast_funds_cross_border
    end

    # Custom attribute writer method with validation
    # @param [Object] online_gambling_fast_funds_domestic Value to be assigned
    def online_gambling_fast_funds_domestic=(online_gambling_fast_funds_domestic)
      @online_gambling_fast_funds_domestic = online_gambling_fast_funds_domestic
    end

    # Custom attribute writer method with validation
    # @param [Object] online_gambling_cross_border Value to be assigned
    def online_gambling_cross_border=(online_gambling_cross_border)
      @online_gambling_cross_border = online_gambling_cross_border
    end

    # Custom attribute writer method with validation
    # @param [Object] online_gambling_domestic Value to be assigned
    def online_gambling_domestic=(online_gambling_domestic)
      @online_gambling_domestic = online_gambling_domestic
    end

    # Custom attribute writer method with validation
    # @param [Object] domestic_participant Value to be assigned
    def domestic_participant=(domestic_participant)
      @domestic_participant = domestic_participant
    end

    # Custom attribute writer method with validation
    # @param [Object] cross_border_participant Value to be assigned
    def cross_border_participant=(cross_border_participant)
      @cross_border_participant = cross_border_participant
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          money_transfer_fast_funds_cross_border == o.money_transfer_fast_funds_cross_border &&
          money_transfer_fast_funds_domestic == o.money_transfer_fast_funds_domestic &&
          money_transfer_cross_border == o.money_transfer_cross_border &&
          money_transfer_domestic == o.money_transfer_domestic &&
          non_money_transfer_fast_funds_cross_border == o.non_money_transfer_fast_funds_cross_border &&
          non_money_transfer_fast_funds_domestic == o.non_money_transfer_fast_funds_domestic &&
          non_money_transfer_cross_border == o.non_money_transfer_cross_border &&
          non_money_transfer_domestic == o.non_money_transfer_domestic &&
          online_gambling_fast_funds_cross_border == o.online_gambling_fast_funds_cross_border &&
          online_gambling_fast_funds_domestic == o.online_gambling_fast_funds_domestic &&
          online_gambling_cross_border == o.online_gambling_cross_border &&
          online_gambling_domestic == o.online_gambling_domestic &&
          domestic_participant == o.domestic_participant &&
          cross_border_participant == o.cross_border_participant
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [money_transfer_fast_funds_cross_border, money_transfer_fast_funds_domestic, money_transfer_cross_border, money_transfer_domestic, non_money_transfer_fast_funds_cross_border, non_money_transfer_fast_funds_domestic, non_money_transfer_cross_border, non_money_transfer_domestic, online_gambling_fast_funds_cross_border, online_gambling_fast_funds_domestic, online_gambling_cross_border, online_gambling_domestic, domestic_participant, cross_border_participant].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
