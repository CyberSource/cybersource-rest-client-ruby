=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CyberSource
  class Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentPayouts
    # Applicable for VPC processors.
    attr_accessor :reimbursement_code

    # This code identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant. This number is usually a Visa-assigned. Applicable for VPC processors.
    attr_accessor :acquiring_institution_id

    # Transaction type. List of supported identifiers documented in the Developer Guide. Applicable for GPX (gpx) and VPC processors.
    attr_accessor :business_application_id

    # Applicable for GPX (gpx) and VPC processors.
    attr_accessor :financial_institution_id

    # Routing Number to identify banks within the United States. Applicable for VPC processors.
    attr_accessor :merchant_aba_number

    # Order of the networks in which Visa should make routing decisions. Applicable for VPC processors.
    attr_accessor :network_order

    # Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
    attr_accessor :currencies

    # Merchant ID assigned by an acquirer or a processor. Should not be overridden by any other party.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Min. Length</th><th>Max. Length</th><th>Regex</th></tr></thead> <tr><td>Barclays</td><td>cnp, hybrid</td><td>No</td><td>1</td><td>11</td><td>^[0-9]+$</td></tr> </table> 
    attr_accessor :merchant_id

    # The 'Terminal Id' aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  <table> <thead><tr><th>Processor</th><th>Acceptance Type</th><th>Required</th><th>Min. Length</th><th>Max. Length</th><th>Regex</th></tr></thead> <tr><td>Barclays</td><td>cnp, hybrid</td><td>No</td><td>1</td><td>255</td><td>^[0-9:&#92;-]+$</td></tr> </table> 
    attr_accessor :terminal_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'reimbursement_code' => :'reimbursementCode',
        :'acquiring_institution_id' => :'acquiringInstitutionId',
        :'business_application_id' => :'businessApplicationId',
        :'financial_institution_id' => :'financialInstitutionId',
        :'merchant_aba_number' => :'merchantAbaNumber',
        :'network_order' => :'networkOrder',
        :'currencies' => :'currencies',
        :'merchant_id' => :'merchantId',
        :'terminal_id' => :'terminalId'
      }
    end

    # Attribute mapping from JSON key to ruby-style variable name.
    def self.json_map
      {
        :'reimbursement_code' => :'reimbursement_code',
        :'acquiring_institution_id' => :'acquiring_institution_id',
        :'business_application_id' => :'business_application_id',
        :'financial_institution_id' => :'financial_institution_id',
        :'merchant_aba_number' => :'merchant_aba_number',
        :'network_order' => :'network_order',
        :'currencies' => :'currencies',
        :'merchant_id' => :'merchant_id',
        :'terminal_id' => :'terminal_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'reimbursement_code' => :'String',
        :'acquiring_institution_id' => :'String',
        :'business_application_id' => :'String',
        :'financial_institution_id' => :'String',
        :'merchant_aba_number' => :'String',
        :'network_order' => :'String',
        :'currencies' => :'Hash<String, Boardingv1registrationsProductInformationSelectedProductsPaymentsCardProcessingConfigurationInformationConfigurationsFeaturesCardNotPresentPayoutsCurrencies>',
        :'merchant_id' => :'String',
        :'terminal_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'reimbursementCode')
        self.reimbursement_code = attributes[:'reimbursementCode']
      end

      if attributes.has_key?(:'acquiringInstitutionId')
        self.acquiring_institution_id = attributes[:'acquiringInstitutionId']
      end

      if attributes.has_key?(:'businessApplicationId')
        self.business_application_id = attributes[:'businessApplicationId']
      end

      if attributes.has_key?(:'financialInstitutionId')
        self.financial_institution_id = attributes[:'financialInstitutionId']
      end

      if attributes.has_key?(:'merchantAbaNumber')
        self.merchant_aba_number = attributes[:'merchantAbaNumber']
      end

      if attributes.has_key?(:'networkOrder')
        self.network_order = attributes[:'networkOrder']
      end

      if attributes.has_key?(:'currencies')
        if (value = attributes[:'currencies']).is_a?(Hash)
          self.currencies = value
        end
      end

      if attributes.has_key?(:'merchantId')
        self.merchant_id = attributes[:'merchantId']
      end

      if attributes.has_key?(:'terminalId')
        self.terminal_id = attributes[:'terminalId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          reimbursement_code == o.reimbursement_code &&
          acquiring_institution_id == o.acquiring_institution_id &&
          business_application_id == o.business_application_id &&
          financial_institution_id == o.financial_institution_id &&
          merchant_aba_number == o.merchant_aba_number &&
          network_order == o.network_order &&
          currencies == o.currencies &&
          merchant_id == o.merchant_id &&
          terminal_id == o.terminal_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [reimbursement_code, acquiring_institution_id, business_application_id, financial_institution_id, merchant_aba_number, network_order, currencies, merchant_id, terminal_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{self.class.json_map[key]}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{self.class.json_map[key]}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CyberSource.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
