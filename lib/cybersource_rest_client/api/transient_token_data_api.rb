=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'uri'
require 'AuthenticationSDK/util/MLEUtility'
module CyberSource
  class TransientTokenDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
      @api_client.set_configuration(config)
    end
    # Get Payment Credentials
    # Retrieve the Payment data captured by Unified Checkout. This API is used to retrieve the detailed data represented by the Transient Token. This API will return PCI payment data captured by the Unified Checkout platform.
    #
    # @param payment_credentials_reference The paymentCredentialsReference field contained within the Transient token returned from a successful Unified Checkout transaction 
    # @param [Hash] opts the optional parameters
    # @return [String]
    #
    def get_payment_credentials_for_transient_token(payment_credentials_reference, opts = {})
      data, status_code, headers = get_payment_credentials_for_transient_token_with_http_info(payment_credentials_reference, opts)
      return data, status_code, headers
    end

    # Get Payment Credentials
    # Retrieve the Payment data captured by Unified Checkout. This API is used to retrieve the detailed data represented by the Transient Token. This API will return PCI payment data captured by the Unified Checkout platform.
    # @param payment_credentials_reference The paymentCredentialsReference field contained within the Transient token returned from a successful Unified Checkout transaction 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_payment_credentials_for_transient_token_with_http_info(payment_credentials_reference, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: TransientTokenDataApi.get_payment_credentials_for_transient_token ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'payment_credentials_reference' is set
      if @api_client.config.client_side_validation && payment_credentials_reference.nil?
        fail ArgumentError, "Missing the required parameter 'payment_credentials_reference' when calling TransientTokenDataApi.get_payment_credentials_for_transient_token"
      end
      # resource path
      local_var_path = 'flex/v2/payment-credentials/{paymentCredentialsReference}'.sub('{' + 'paymentCredentialsReference' + '}', payment_credentials_reference.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/jwt'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["get_payment_credentials_for_transient_token","get_payment_credentials_for_transient_token_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: TransientTokenDataApi#get_payment_credentials_for_transient_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Get Transient Token Data
    # Retrieve the data captured by Unified Checkout. This API is used to retrieve the detailed data represented by the Transient Token. This API will not return PCI payment data (PAN). Include the Request ID in the GET request to retrieve the transaction details.
    #
    # @param transient_token Transient Token returned by the Unified Checkout application. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    #
    def get_transaction_for_transient_token(transient_token, opts = {})
      data, status_code, headers = get_transaction_for_transient_token_with_http_info(transient_token, opts)
      return data, status_code, headers
    end

    # Get Transient Token Data
    # Retrieve the data captured by Unified Checkout. This API is used to retrieve the detailed data represented by the Transient Token. This API will not return PCI payment data (PAN). Include the Request ID in the GET request to retrieve the transaction details.
    # @param transient_token Transient Token returned by the Unified Checkout application. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_transaction_for_transient_token_with_http_info(transient_token, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: TransientTokenDataApi.get_transaction_for_transient_token ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'transient_token' is set
      if @api_client.config.client_side_validation && transient_token.nil?
        fail ArgumentError, "Missing the required parameter 'transient_token' when calling TransientTokenDataApi.get_transaction_for_transient_token"
      end
      # resource path
      local_var_path = 'up/v1/payment-details/{transientToken}'.sub('{' + 'transientToken' + '}', transient_token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["get_transaction_for_transient_token","get_transaction_for_transient_token_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: TransientTokenDataApi#get_transaction_for_transient_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
  end
end
