=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'uri'

module CyberSource
  class InvoicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
      @api_client.set_configuration(config)
    end
    # Create a New Invoice
    # Create a new invoice.
    # @param create_invoice_request 
    # @param [Hash] opts the optional parameters
    # @return [InvoicingV2InvoicesPost201Response]
    def create_invoice(create_invoice_request, opts = {})
      data, status_code, headers = create_invoice_with_http_info(create_invoice_request, opts)
      return data, status_code, headers
    end

    # Create a New Invoice
    # Create a new invoice.
    # @param create_invoice_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicingV2InvoicesPost201Response, Fixnum, Hash)>] InvoicingV2InvoicesPost201Response data, response status code and response headers
    def create_invoice_with_http_info(create_invoice_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: InvoicesApi.create_invoice ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'create_invoice_request' is set
      if @api_client.config.client_side_validation && create_invoice_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_invoice_request' when calling InvoicesApi.create_invoice"
      end
      # resource path
      local_var_path = 'invoicing/v2/invoices'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_invoice_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicingV2InvoicesPost201Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: InvoicesApi#create_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Get a List of Invoices
    # Get a list of invoices.
    # @param offset Page offset number.
    # @param limit Maximum number of items you would like returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED 
    # @return [InvoicingV2InvoicesAllGet200Response]
    def get_all_invoices(offset, limit, opts = {})
      data, status_code, headers = get_all_invoices_with_http_info(offset, limit, opts)
      return data, status_code, headers
    end

    # Get a List of Invoices
    # Get a list of invoices.
    # @param offset Page offset number.
    # @param limit Maximum number of items you would like returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED 
    # @return [Array<(InvoicingV2InvoicesAllGet200Response, Fixnum, Hash)>] InvoicingV2InvoicesAllGet200Response data, response status code and response headers
    def get_all_invoices_with_http_info(offset, limit, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: InvoicesApi.get_all_invoices ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling InvoicesApi.get_all_invoices"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling InvoicesApi.get_all_invoices"
      end
      # resource path
      local_var_path = 'invoicing/v2/invoices'

      # query parameters
      query_params = {}
      query_params[:'offset'] = offset
      query_params[:'limit'] = limit
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicingV2InvoicesAllGet200Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: InvoicesApi#get_all_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Get Invoice Details
    # Get the details of a specific invoice.
    # @param id The invoice number.
    # @param [Hash] opts the optional parameters
    # @return [InvoicingV2InvoicesGet200Response]
    def get_invoice(id, opts = {})
      data, status_code, headers = get_invoice_with_http_info(id, opts)
      return data, status_code, headers
    end

    # Get Invoice Details
    # Get the details of a specific invoice.
    # @param id The invoice number.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicingV2InvoicesGet200Response, Fixnum, Hash)>] InvoicingV2InvoicesGet200Response data, response status code and response headers
    def get_invoice_with_http_info(id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: InvoicesApi.get_invoice ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoicesApi.get_invoice"
      end
      # resource path
      local_var_path = 'invoicing/v2/invoices/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicingV2InvoicesGet200Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: InvoicesApi#get_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Cancel an Invoice
    # Cancel an invoice.
    # @param id The invoice number.
    # @param [Hash] opts the optional parameters
    # @return [InvoicingV2InvoicesPost201Response]
    def perform_cancel_action(id, opts = {})
      data, status_code, headers = perform_cancel_action_with_http_info(id, opts)
      return data, status_code, headers
    end

    # Cancel an Invoice
    # Cancel an invoice.
    # @param id The invoice number.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicingV2InvoicesPost201Response, Fixnum, Hash)>] InvoicingV2InvoicesPost201Response data, response status code and response headers
    def perform_cancel_action_with_http_info(id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: InvoicesApi.perform_cancel_action ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoicesApi.perform_cancel_action"
      end
      # resource path
      local_var_path = 'invoicing/v2/invoices/{id}/cancelation'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'POST' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicingV2InvoicesPost201Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: InvoicesApi#perform_cancel_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Send an Invoice
    # Send an invoice.
    # @param id The invoice number.
    # @param [Hash] opts the optional parameters
    # @return [InvoicingV2InvoicesPost201Response]
    def perform_send_action(id, opts = {})
      data, status_code, headers = perform_send_action_with_http_info(id, opts)
      return data, status_code, headers
    end

    # Send an Invoice
    # Send an invoice.
    # @param id The invoice number.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicingV2InvoicesPost201Response, Fixnum, Hash)>] InvoicingV2InvoicesPost201Response data, response status code and response headers
    def perform_send_action_with_http_info(id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: InvoicesApi.perform_send_action ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoicesApi.perform_send_action"
      end
      # resource path
      local_var_path = 'invoicing/v2/invoices/{id}/delivery'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'POST' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicingV2InvoicesPost201Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: InvoicesApi#perform_send_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Update an Invoice
    # Update an invoice.
    # @param id The invoice number.
    # @param update_invoice_request Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.
    # @param [Hash] opts the optional parameters
    # @return [InvoicingV2InvoicesPost201Response]
    def update_invoice(id, update_invoice_request, opts = {})
      data, status_code, headers = update_invoice_with_http_info(id, update_invoice_request, opts)
      return data, status_code, headers
    end

    # Update an Invoice
    # Update an invoice.
    # @param id The invoice number.
    # @param update_invoice_request Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicingV2InvoicesPost201Response, Fixnum, Hash)>] InvoicingV2InvoicesPost201Response data, response status code and response headers
    def update_invoice_with_http_info(id, update_invoice_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: InvoicesApi.update_invoice ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InvoicesApi.update_invoice"
      end
      # verify the required parameter 'update_invoice_request' is set
      if @api_client.config.client_side_validation && update_invoice_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_invoice_request' when calling InvoicesApi.update_invoice"
      end
      # resource path
      local_var_path = 'invoicing/v2/invoices/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_invoice_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicingV2InvoicesPost201Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: InvoicesApi#update_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
  end
end
