=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'uri'
require 'AuthenticationSDK/util/MLEUtility'
module CyberSource
  class PaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
      @api_client.set_configuration(config)
    end
    # Create a Payment Order Request
    # Create a Payment Order Request
    #
    # @param order_payment_request 
    # @param id Request identifier number for the order request. 
    # @param [Hash] opts the optional parameters
    # @return [PtsV2PaymentsOrderPost201Response]
    #
    def create_order_request(order_payment_request, id, opts = {})
      data, status_code, headers = create_order_request_with_http_info(order_payment_request, id, opts)
      return data, status_code, headers
    end

    # Create a Payment Order Request
    # Create a Payment Order Request
    # @param order_payment_request 
    # @param id Request identifier number for the order request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PtsV2PaymentsOrderPost201Response, Fixnum, Hash)>] PtsV2PaymentsOrderPost201Response data, response status code and response headers
    def create_order_request_with_http_info(order_payment_request, id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentsApi.create_order_request ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'order_payment_request' is set
      if @api_client.config.client_side_validation && order_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'order_payment_request' when calling PaymentsApi.create_order_request"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.create_order_request"
      end
      # resource path
      local_var_path = 'pts/v2/payment-references/{id}/intents'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(order_payment_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'OrderPaymentRequest', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = true
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["create_order_request","create_order_request_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PtsV2PaymentsOrderPost201Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentsApi#create_order_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Process a Payment
    # A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
    #
    # @param create_payment_request 
    # @param [Hash] opts the optional parameters
    # @return [PtsV2PaymentsPost201Response]
    #
    def create_payment(create_payment_request, opts = {})
      data, status_code, headers = create_payment_with_http_info(create_payment_request, opts)
      return data, status_code, headers
    end

    # Process a Payment
    # A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
    # @param create_payment_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PtsV2PaymentsPost201Response, Fixnum, Hash)>] PtsV2PaymentsPost201Response data, response status code and response headers
    def create_payment_with_http_info(create_payment_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentsApi.create_payment ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'create_payment_request' is set
      if @api_client.config.client_side_validation && create_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_payment_request' when calling PaymentsApi.create_payment"
      end
      # resource path
      local_var_path = 'pts/v2/payments'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_payment_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'CreatePaymentRequest', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = true
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["create_payment","create_payment_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PtsV2PaymentsPost201Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentsApi#create_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Create Alternative Payments Sessions Request
    # Create Alternative Payments Sessions Request
    #
    # @param create_session_req 
    # @param [Hash] opts the optional parameters
    # @return [PtsV2PaymentsPost201Response2]
    #
    def create_session_request(create_session_req, opts = {})
      data, status_code, headers = create_session_request_with_http_info(create_session_req, opts)
      return data, status_code, headers
    end

    # Create Alternative Payments Sessions Request
    # Create Alternative Payments Sessions Request
    # @param create_session_req 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PtsV2PaymentsPost201Response2, Fixnum, Hash)>] PtsV2PaymentsPost201Response2 data, response status code and response headers
    def create_session_request_with_http_info(create_session_req, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentsApi.create_session_request ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'create_session_req' is set
      if @api_client.config.client_side_validation && create_session_req.nil?
        fail ArgumentError, "Missing the required parameter 'create_session_req' when calling PaymentsApi.create_session_request"
      end
      # resource path
      local_var_path = 'pts/v2/payment-references'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_session_req)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'CreateSessionReq', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = true
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["create_session_request","create_session_request_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PtsV2PaymentsPost201Response2')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentsApi#create_session_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Increment an Authorization
    # Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
    #
    # @param id The ID returned from the original authorization request.
    # @param increment_auth_request 
    # @param [Hash] opts the optional parameters
    # @return [PtsV2IncrementalAuthorizationPatch201Response]
    #
    def increment_auth(id, increment_auth_request, opts = {})
      data, status_code, headers = increment_auth_with_http_info(id, increment_auth_request, opts)
      return data, status_code, headers
    end

    # Increment an Authorization
    # Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
    # @param id The ID returned from the original authorization request.
    # @param increment_auth_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PtsV2IncrementalAuthorizationPatch201Response, Fixnum, Hash)>] PtsV2IncrementalAuthorizationPatch201Response data, response status code and response headers
    def increment_auth_with_http_info(id, increment_auth_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentsApi.increment_auth ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.increment_auth"
      end
      # verify the required parameter 'increment_auth_request' is set
      if @api_client.config.client_side_validation && increment_auth_request.nil?
        fail ArgumentError, "Missing the required parameter 'increment_auth_request' when calling PaymentsApi.increment_auth"
      end
      # resource path
      local_var_path = 'pts/v2/payments/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(increment_auth_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'IncrementAuthRequest', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = true
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["increment_auth","increment_auth_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PtsV2IncrementalAuthorizationPatch201Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentsApi#increment_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Check a Payment Status
    # Checks and updates the payment status 
    #
    # @param id The payment id whose status needs to be checked and updated.
    # @param refresh_payment_status_request 
    # @param [Hash] opts the optional parameters
    # @return [PtsV2PaymentsPost201Response1]
    #
    def refresh_payment_status(id, refresh_payment_status_request, opts = {})
      data, status_code, headers = refresh_payment_status_with_http_info(id, refresh_payment_status_request, opts)
      return data, status_code, headers
    end

    # Check a Payment Status
    # Checks and updates the payment status 
    # @param id The payment id whose status needs to be checked and updated.
    # @param refresh_payment_status_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PtsV2PaymentsPost201Response1, Fixnum, Hash)>] PtsV2PaymentsPost201Response1 data, response status code and response headers
    def refresh_payment_status_with_http_info(id, refresh_payment_status_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentsApi.refresh_payment_status ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.refresh_payment_status"
      end
      # verify the required parameter 'refresh_payment_status_request' is set
      if @api_client.config.client_side_validation && refresh_payment_status_request.nil?
        fail ArgumentError, "Missing the required parameter 'refresh_payment_status_request' when calling PaymentsApi.refresh_payment_status"
      end
      # resource path
      local_var_path = 'pts/v2/refresh-payment-status/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(refresh_payment_status_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'RefreshPaymentStatusRequest', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = true
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["refresh_payment_status","refresh_payment_status_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PtsV2PaymentsPost201Response1')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentsApi#refresh_payment_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Update Alternative Payments Sessions Request
    # Update Alternative Payments Sessions Request
    #
    # @param create_session_request 
    # @param id The payment ID. This ID is returned from a previous payment request.
    # @param [Hash] opts the optional parameters
    # @return [PtsV2PaymentsPost201Response2]
    #
    def update_session_req(create_session_request, id, opts = {})
      data, status_code, headers = update_session_req_with_http_info(create_session_request, id, opts)
      return data, status_code, headers
    end

    # Update Alternative Payments Sessions Request
    # Update Alternative Payments Sessions Request
    # @param create_session_request 
    # @param id The payment ID. This ID is returned from a previous payment request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PtsV2PaymentsPost201Response2, Fixnum, Hash)>] PtsV2PaymentsPost201Response2 data, response status code and response headers
    def update_session_req_with_http_info(create_session_request, id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentsApi.update_session_req ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'create_session_request' is set
      if @api_client.config.client_side_validation && create_session_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_session_request' when calling PaymentsApi.update_session_req"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.update_session_req"
      end
      # resource path
      local_var_path = 'pts/v2/payment-references/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_session_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'CreateSessionRequest', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = true
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["update_session_req","update_session_req_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PtsV2PaymentsPost201Response2')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentsApi#update_session_req\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
  end
end
