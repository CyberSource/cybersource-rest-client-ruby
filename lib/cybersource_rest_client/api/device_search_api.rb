=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'uri'
require 'AuthenticationSDK/util/MLEUtility'
module CyberSource
  class DeviceSearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
      @api_client.set_configuration(config)
    end
    # Retrieve List of Devices for a given search query V2
    # Retrieves list of terminals in paginated format.
    #
    # @param post_device_search_request 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    #
    def post_search_query(post_device_search_request, opts = {})
      data, status_code, headers = post_search_query_with_http_info(post_device_search_request, opts)
      return data, status_code, headers
    end

    # Retrieve List of Devices for a given search query V2
    # Retrieves list of terminals in paginated format.
    # @param post_device_search_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def post_search_query_with_http_info(post_device_search_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: DeviceSearchApi.post_search_query ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'post_device_search_request' is set
      if @api_client.config.client_side_validation && post_device_search_request.nil?
        fail ArgumentError, "Missing the required parameter 'post_device_search_request' when calling DeviceSearchApi.post_search_query"
      end
      # resource path
      local_var_path = 'dms/v2/devices/search'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=UTF-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_device_search_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'PostDeviceSearchRequest', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["post_search_query","post_search_query_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: DeviceSearchApi#post_search_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Retrieve List of Devices for a given search query
    # Search for devices matching a given search query.  The search query supports serialNumber, readerId, terminalId, status, statusChangeReason or organizationId  Matching results are paginated. 
    #
    # @param post_device_search_request_v3 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    #
    def post_search_query_v3(post_device_search_request_v3, opts = {})
      data, status_code, headers = post_search_query_v3_with_http_info(post_device_search_request_v3, opts)
      return data, status_code, headers
    end

    # Retrieve List of Devices for a given search query
    # Search for devices matching a given search query.  The search query supports serialNumber, readerId, terminalId, status, statusChangeReason or organizationId  Matching results are paginated. 
    # @param post_device_search_request_v3 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def post_search_query_v3_with_http_info(post_device_search_request_v3, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: DeviceSearchApi.post_search_query_v3 ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'post_device_search_request_v3' is set
      if @api_client.config.client_side_validation && post_device_search_request_v3.nil?
        fail ArgumentError, "Missing the required parameter 'post_device_search_request_v3' when calling DeviceSearchApi.post_search_query_v3"
      end
      # resource path
      local_var_path = 'dms/v3/devices/search'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=UTF-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_device_search_request_v3)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'PostDeviceSearchRequestV3', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["post_search_query_v3","post_search_query_v3_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: DeviceSearchApi#post_search_query_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
  end
end
