=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'uri'
require 'AuthenticationSDK/util/MLEUtility'
module CyberSource
  class ReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
      @api_client.set_configuration(config)
    end
    # Create Adhoc Report
    # Create a one-time report. You must specify the type of report in reportDefinitionName. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation) 
    #
    # @param create_adhoc_report_request Report subscription request payload
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id Valid Organization Id
    # @return [nil]
    #
    def create_report(create_adhoc_report_request, opts = {})
      data, status_code, headers = create_report_with_http_info(create_adhoc_report_request, opts)
      return data, status_code, headers
    end

    # Create Adhoc Report
    # Create a one-time report. You must specify the type of report in reportDefinitionName. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation) 
    # @param create_adhoc_report_request Report subscription request payload
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id Valid Organization Id
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_report_with_http_info(create_adhoc_report_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: ReportsApi.create_report ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'create_adhoc_report_request' is set
      if @api_client.config.client_side_validation && create_adhoc_report_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_adhoc_report_request' when calling ReportsApi.create_report"
      end
      #if @api_client.config.client_side_validation && !opts[:'organization_id'].nil? && opts[:'organization_id'] !~ Regexp.new(/[a-zA-Z0-9-_]+/)
        #fail ArgumentError, "invalid value for 'opts[:\"organization_id\"]' when calling ReportsApi.create_report, must conform to the pattern /[a-zA-Z0-9-_]+/."
      #end

      # resource path
      local_var_path = 'reporting/v3/reports'

      # query parameters
      query_params = {}
      query_params[:'organizationId'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_adhoc_report_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'CreateAdhocReportRequest', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      inbound_mle_status = "false"      
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, inbound_mle_status, ["create_report","create_report_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: ReportsApi#create_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Get Report Based on Report Id
    # Download a report using the reportId value. If you don't already know this value, you can obtain it using the Retrieve available reports call. 
    #
    # @param report_id Valid Report Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id Valid Organization Id
    # @return [ReportingV3ReportsIdGet200Response]
    #
    def get_report_by_report_id(report_id, opts = {})
      data, status_code, headers = get_report_by_report_id_with_http_info(report_id, opts)
      return data, status_code, headers
    end

    # Get Report Based on Report Id
    # Download a report using the reportId value. If you don&#39;t already know this value, you can obtain it using the Retrieve available reports call. 
    # @param report_id Valid Report Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id Valid Organization Id
    # @return [Array<(ReportingV3ReportsIdGet200Response, Fixnum, Hash)>] ReportingV3ReportsIdGet200Response data, response status code and response headers
    def get_report_by_report_id_with_http_info(report_id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: ReportsApi.get_report_by_report_id ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportsApi.get_report_by_report_id"
      end
      #if @api_client.config.client_side_validation && !opts[:'organization_id'].nil? && opts[:'organization_id'] !~ Regexp.new(/[a-zA-Z0-9-_]+/)
        #fail ArgumentError, "invalid value for 'opts[:\"organization_id\"]' when calling ReportsApi.get_report_by_report_id, must conform to the pattern /[a-zA-Z0-9-_]+/."
      #end

      # resource path
      local_var_path = 'reporting/v3/reports/{reportId}'.sub('{' + 'reportId' + '}', report_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizationId'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      inbound_mle_status = "false"      
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, inbound_mle_status, ["get_report_by_report_id","get_report_by_report_id_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportingV3ReportsIdGet200Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: ReportsApi#get_report_by_report_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Retrieve Available Reports
    # Retrieve a list of the available reports to which you are subscribed. This will also give you the reportId value, which you can also use to download a report. 
    #
    # @param start_time Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
    # @param end_time Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
    # @param time_query_type Specify time you would like to search  Valid values: - reportTimeFrame - executedTime 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id Valid Organization Id
    # @option opts [String] :report_mime_type Valid Report Format  Valid values: - application/xml - text/csv 
    # @option opts [String] :report_frequency Valid Report Frequency  Valid values: - DAILY - WEEKLY - MONTHLY - USER_DEFINED - ADHOC 
    # @option opts [String] :report_name Valid Report Name
    # @option opts [Integer] :report_definition_id Valid Report Definition Id
    # @option opts [String] :report_status Valid Report Status  Valid values: - COMPLETED - PENDING - QUEUED - RUNNING - ERROR - NO_DATA 
    # @return [ReportingV3ReportsGet200Response]
    #
    def search_reports(start_time, end_time, time_query_type, opts = {})
      data, status_code, headers = search_reports_with_http_info(start_time, end_time, time_query_type, opts)
      return data, status_code, headers
    end

    # Retrieve Available Reports
    # Retrieve a list of the available reports to which you are subscribed. This will also give you the reportId value, which you can also use to download a report. 
    # @param start_time Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
    # @param end_time Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z) 
    # @param time_query_type Specify time you would like to search  Valid values: - reportTimeFrame - executedTime 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id Valid Organization Id
    # @option opts [String] :report_mime_type Valid Report Format  Valid values: - application/xml - text/csv 
    # @option opts [String] :report_frequency Valid Report Frequency  Valid values: - DAILY - WEEKLY - MONTHLY - USER_DEFINED - ADHOC 
    # @option opts [String] :report_name Valid Report Name
    # @option opts [Integer] :report_definition_id Valid Report Definition Id
    # @option opts [String] :report_status Valid Report Status  Valid values: - COMPLETED - PENDING - QUEUED - RUNNING - ERROR - NO_DATA 
    # @return [Array<(ReportingV3ReportsGet200Response, Fixnum, Hash)>] ReportingV3ReportsGet200Response data, response status code and response headers
    def search_reports_with_http_info(start_time, end_time, time_query_type, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: ReportsApi.search_reports ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'start_time' is set
      if @api_client.config.client_side_validation && start_time.nil?
        fail ArgumentError, "Missing the required parameter 'start_time' when calling ReportsApi.search_reports"
      end
      # verify the required parameter 'end_time' is set
      if @api_client.config.client_side_validation && end_time.nil?
        fail ArgumentError, "Missing the required parameter 'end_time' when calling ReportsApi.search_reports"
      end
      # verify the required parameter 'time_query_type' is set
      if @api_client.config.client_side_validation && time_query_type.nil?
        fail ArgumentError, "Missing the required parameter 'time_query_type' when calling ReportsApi.search_reports"
      end
      #if @api_client.config.client_side_validation && !opts[:'organization_id'].nil? && opts[:'organization_id'] !~ Regexp.new(/[a-zA-Z0-9-_]+/)
        #fail ArgumentError, "invalid value for 'opts[:\"organization_id\"]' when calling ReportsApi.search_reports, must conform to the pattern /[a-zA-Z0-9-_]+/."
      #end

      # resource path
      local_var_path = 'reporting/v3/reports'

      # query parameters
      query_params = {}
      query_params[:'startTime'] = start_time
      query_params[:'endTime'] = end_time
      query_params[:'timeQueryType'] = time_query_type
      query_params[:'organizationId'] = opts[:'organization_id'] if !opts[:'organization_id'].nil?
      query_params[:'reportMimeType'] = opts[:'report_mime_type'] if !opts[:'report_mime_type'].nil?
      query_params[:'reportFrequency'] = opts[:'report_frequency'] if !opts[:'report_frequency'].nil?
      query_params[:'reportName'] = opts[:'report_name'] if !opts[:'report_name'].nil?
      query_params[:'reportDefinitionId'] = opts[:'report_definition_id'] if !opts[:'report_definition_id'].nil?
      query_params[:'reportStatus'] = opts[:'report_status'] if !opts[:'report_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      inbound_mle_status = "false"      
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, inbound_mle_status, ["search_reports","search_reports_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportingV3ReportsGet200Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: ReportsApi#search_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
  end
end
