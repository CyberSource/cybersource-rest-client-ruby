=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'uri'
require 'AuthenticationSDK/util/MLEUtility'
module CyberSource
  class DeviceDeAssociationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
      @api_client.set_configuration(config)
    end
    # De-associate a device from merchant or account V2
    # The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
    #
    # @param de_association_request_body de association of the deviceId in the request body.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    #
    def delete_terminal_association(de_association_request_body, opts = {})
      data, status_code, headers = delete_terminal_association_with_http_info(de_association_request_body, opts)
      return data, status_code, headers
    end

    # De-associate a device from merchant or account V2
    # The current association of the device will be removed and will be assigned back to parent in the hierarchy based on internal logic
    # @param de_association_request_body de association of the deviceId in the request body.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_terminal_association_with_http_info(de_association_request_body, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: DeviceDeAssociationApi.delete_terminal_association ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'de_association_request_body' is set
      if @api_client.config.client_side_validation && de_association_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'de_association_request_body' when calling DeviceDeAssociationApi.delete_terminal_association"
      end
      # resource path
      local_var_path = 'dms/v2/devices/deassociate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=UTF-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(de_association_request_body)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'DeAssociationRequestBody', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["delete_terminal_association","delete_terminal_association_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: DeviceDeAssociationApi#delete_terminal_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # De-associate a device from merchant to account or reseller and from account to reseller
    # A device will be de-associated from its current organization and moved up in the hierarchy. The device's new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
    #
    # @param device_de_associate_v3_request deviceId that has to be de-associated to the destination organizationId.
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse2006>]
    #
    def post_de_associate_v3_terminal(device_de_associate_v3_request, opts = {})
      data, status_code, headers = post_de_associate_v3_terminal_with_http_info(device_de_associate_v3_request, opts)
      return data, status_code, headers
    end

    # De-associate a device from merchant to account or reseller and from account to reseller
    # A device will be de-associated from its current organization and moved up in the hierarchy. The device&#39;s new position will be determined by a specified destination, either an account or a portfolio. If no destination is provided, the device will default to the currently logged-in user. 
    # @param device_de_associate_v3_request deviceId that has to be de-associated to the destination organizationId.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse2006>, Fixnum, Hash)>] Array<InlineResponse2006> data, response status code and response headers
    def post_de_associate_v3_terminal_with_http_info(device_de_associate_v3_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: DeviceDeAssociationApi.post_de_associate_v3_terminal ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'device_de_associate_v3_request' is set
      if @api_client.config.client_side_validation && device_de_associate_v3_request.nil?
        fail ArgumentError, "Missing the required parameter 'device_de_associate_v3_request' when calling DeviceDeAssociationApi.post_de_associate_v3_terminal"
      end
      # resource path
      local_var_path = 'dms/v3/devices/deassociate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=UTF-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(device_de_associate_v3_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'Array&lt;DeviceDeAssociateV3Request&gt;', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["post_de_associate_v3_terminal","post_de_associate_v3_terminal_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<InlineResponse2006>')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: DeviceDeAssociationApi#post_de_associate_v3_terminal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
  end
end
