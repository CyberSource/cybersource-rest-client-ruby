=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'uri'

module CyberSource
  class PlansApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
      @api_client.set_configuration(config)
    end
    # Activate a Plan
    # Activate a Plan
    # @param id Plan Id
    # @param [Hash] opts the optional parameters
    # @return [ActivateDeactivatePlanResponse]
    def activate_plan(id, opts = {})
      data, status_code, headers = activate_plan_with_http_info(id, opts)
      return data, status_code, headers
    end

    # Activate a Plan
    # Activate a Plan
    # @param id Plan Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivateDeactivatePlanResponse, Fixnum, Hash)>] ActivateDeactivatePlanResponse data, response status code and response headers
    def activate_plan_with_http_info(id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PlansApi.activate_plan ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PlansApi.activate_plan"
      end
      # resource path
      local_var_path = 'rbs/v1/plans/{id}/activate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'POST' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ActivateDeactivatePlanResponse')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PlansApi#activate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Create a Plan
    # The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer's payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
    # @param create_plan_request 
    # @param [Hash] opts the optional parameters
    # @return [CreatePlanResponse]
    def create_plan(create_plan_request, opts = {})
      data, status_code, headers = create_plan_with_http_info(create_plan_request, opts)
      return data, status_code, headers
    end

    # Create a Plan
    # The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
    # @param create_plan_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePlanResponse, Fixnum, Hash)>] CreatePlanResponse data, response status code and response headers
    def create_plan_with_http_info(create_plan_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PlansApi.create_plan ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'create_plan_request' is set
      if @api_client.config.client_side_validation && create_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_plan_request' when calling PlansApi.create_plan"
      end
      # resource path
      local_var_path = 'rbs/v1/plans'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_plan_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatePlanResponse')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PlansApi#create_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Deactivate a Plan
    # Deactivate a Plan
    # @param id Plan Id
    # @param [Hash] opts the optional parameters
    # @return [ActivateDeactivatePlanResponse]
    def deactivate_plan(id, opts = {})
      data, status_code, headers = deactivate_plan_with_http_info(id, opts)
      return data, status_code, headers
    end

    # Deactivate a Plan
    # Deactivate a Plan
    # @param id Plan Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivateDeactivatePlanResponse, Fixnum, Hash)>] ActivateDeactivatePlanResponse data, response status code and response headers
    def deactivate_plan_with_http_info(id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PlansApi.deactivate_plan ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PlansApi.deactivate_plan"
      end
      # resource path
      local_var_path = 'rbs/v1/plans/{id}/deactivate'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'POST' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ActivateDeactivatePlanResponse')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PlansApi#deactivate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Delete a Plan
    # Delete a Plan is only allowed: - plan status is in `DRAFT` - plan status is in `ACTIVE`, and `INACTIVE` only allowed when no subscriptions attached to a plan in the lifetime of a plan 
    # @param id Plan Id
    # @param [Hash] opts the optional parameters
    # @return [DeletePlanResponse]
    def delete_plan(id, opts = {})
      data, status_code, headers = delete_plan_with_http_info(id, opts)
      return data, status_code, headers
    end

    # Delete a Plan
    # Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
    # @param id Plan Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletePlanResponse, Fixnum, Hash)>] DeletePlanResponse data, response status code and response headers
    def delete_plan_with_http_info(id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PlansApi.delete_plan ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PlansApi.delete_plan"
      end
      # resource path
      local_var_path = 'rbs/v1/plans/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'DELETE' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeletePlanResponse')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PlansApi#delete_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Get a Plan
    # Retrieve a Plan details by Plan Id.
    # @param id Plan Id
    # @param [Hash] opts the optional parameters
    # @return [GetPlanResponse]
    def get_plan(id, opts = {})
      data, status_code, headers = get_plan_with_http_info(id, opts)
      return data, status_code, headers
    end

    # Get a Plan
    # Retrieve a Plan details by Plan Id.
    # @param id Plan Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPlanResponse, Fixnum, Hash)>] GetPlanResponse data, response status code and response headers
    def get_plan_with_http_info(id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PlansApi.get_plan ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PlansApi.get_plan"
      end
      # resource path
      local_var_path = 'rbs/v1/plans/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPlanResponse')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PlansApi#get_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Get a Plan Code
    # Get a Unique Plan Code
    # @param [Hash] opts the optional parameters
    # @return [GetPlanCodeResponse]
    def get_plan_code(opts = {})
      data, status_code, headers = get_plan_code_with_http_info(opts)
      return data, status_code, headers
    end

    # Get a Plan Code
    # Get a Unique Plan Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPlanCodeResponse, Fixnum, Hash)>] GetPlanCodeResponse data, response status code and response headers
    def get_plan_code_with_http_info(opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PlansApi.get_plan_code ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # resource path
      local_var_path = 'rbs/v1/plans/code'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPlanCodeResponse')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PlansApi#get_plan_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Get a List of Plans
    # Retrieve Plans by Plan Code & Plan Status. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Page offset number.
    # @option opts [Integer] :limit Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60; 
    # @option opts [String] :code Filter by Plan Code
    # @option opts [String] :status Filter by Plan Status
    # @option opts [String] :name Filter by Plan Name. (First sub string or full string) **[Not Recommended]** 
    # @return [GetAllPlansResponse]
    def get_plans(opts = {})
      data, status_code, headers = get_plans_with_http_info(opts)
      return data, status_code, headers
    end

    # Get a List of Plans
    # Retrieve Plans by Plan Code &amp; Plan Status. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Page offset number.
    # @option opts [Integer] :limit Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60; 
    # @option opts [String] :code Filter by Plan Code
    # @option opts [String] :status Filter by Plan Status
    # @option opts [String] :name Filter by Plan Name. (First sub string or full string) **[Not Recommended]** 
    # @return [Array<(GetAllPlansResponse, Fixnum, Hash)>] GetAllPlansResponse data, response status code and response headers
    def get_plans_with_http_info(opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PlansApi.get_plans ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # resource path
      local_var_path = 'rbs/v1/plans'

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllPlansResponse')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PlansApi#get_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Update a Plan
    # Update a Plan  Plan in `DRAFT` status - All updates are allowed on Plan with `DRAFT` status  Plan in `ACTIVE` status [Following fields are **Not Updatable**] - `planInformation.billingPeriod` - `planInformation.billingCycles` [Update is only allowed to **increase** billingCycles] - `orderInformation.amountDetails.currency` 
    # @param id Plan Id
    # @param update_plan_request 
    # @param [Hash] opts the optional parameters
    # @return [UpdatePlanResponse]
    def update_plan(id, update_plan_request, opts = {})
      data, status_code, headers = update_plan_with_http_info(id, update_plan_request, opts)
      return data, status_code, headers
    end

    # Update a Plan
    # Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
    # @param id Plan Id
    # @param update_plan_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdatePlanResponse, Fixnum, Hash)>] UpdatePlanResponse data, response status code and response headers
    def update_plan_with_http_info(id, update_plan_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PlansApi.update_plan ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PlansApi.update_plan"
      end
      # verify the required parameter 'update_plan_request' is set
      if @api_client.config.client_side_validation && update_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_plan_request' when calling PlansApi.update_plan"
      end
      # resource path
      local_var_path = 'rbs/v1/plans/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_plan_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdatePlanResponse')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PlansApi#update_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
  end
end
