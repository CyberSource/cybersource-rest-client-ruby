=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'uri'
require 'AuthenticationSDK/util/MLEUtility'
module CyberSource
  class PaymentLinksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default, config)
      @api_client = api_client
      @api_client.set_configuration(config)
    end
    # Create a Payment Link
    # Create a new payment link.
    #
    # @param create_payment_link_request 
    # @param [Hash] opts the optional parameters
    # @return [PblPaymentLinksPost201Response]
    #
    def create_payment_link(create_payment_link_request, opts = {})
      data, status_code, headers = create_payment_link_with_http_info(create_payment_link_request, opts)
      return data, status_code, headers
    end

    # Create a Payment Link
    # Create a new payment link.
    # @param create_payment_link_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PblPaymentLinksPost201Response, Fixnum, Hash)>] PblPaymentLinksPost201Response data, response status code and response headers
    def create_payment_link_with_http_info(create_payment_link_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentLinksApi.create_payment_link ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'create_payment_link_request' is set
      if @api_client.config.client_side_validation && create_payment_link_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_payment_link_request' when calling PaymentLinksApi.create_payment_link"
      end
      # resource path
      local_var_path = 'ipl/v2/payment-links'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_payment_link_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'CreatePaymentLinkRequest', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["create_payment_link","create_payment_link_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PblPaymentLinksPost201Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentLinksApi#create_payment_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Get a List of Payment Links
    # Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
    #
    # @param offset Page offset number.
    # @param limit Maximum number of items you would like returned.   Maximum limit: 1000 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE 
    # @return [PblPaymentLinksAllGet200Response]
    #
    def get_all_payment_links(offset, limit, opts = {})
      data, status_code, headers = get_all_payment_links_with_http_info(offset, limit, opts)
      return data, status_code, headers
    end

    # Get a List of Payment Links
    # Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
    # @param offset Page offset number.
    # @param limit Maximum number of items you would like returned.   Maximum limit: 1000 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE 
    # @return [Array<(PblPaymentLinksAllGet200Response, Fixnum, Hash)>] PblPaymentLinksAllGet200Response data, response status code and response headers
    def get_all_payment_links_with_http_info(offset, limit, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentLinksApi.get_all_payment_links ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'offset' is set
      if @api_client.config.client_side_validation && offset.nil?
        fail ArgumentError, "Missing the required parameter 'offset' when calling PaymentLinksApi.get_all_payment_links"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling PaymentLinksApi.get_all_payment_links"
      end
      # resource path
      local_var_path = 'ipl/v2/payment-links'

      # query parameters
      query_params = {}
      query_params[:'offset'] = offset
      query_params[:'limit'] = limit
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["get_all_payment_links","get_all_payment_links_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PblPaymentLinksAllGet200Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentLinksApi#get_all_payment_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Get Payment Link Details
    # You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
    #
    # @param id The purchase number.
    # @param [Hash] opts the optional parameters
    # @return [PblPaymentLinksGet200Response]
    #
    def get_payment_link(id, opts = {})
      data, status_code, headers = get_payment_link_with_http_info(id, opts)
      return data, status_code, headers
    end

    # Get Payment Link Details
    # You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
    # @param id The purchase number.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PblPaymentLinksGet200Response, Fixnum, Hash)>] PblPaymentLinksGet200Response data, response status code and response headers
    def get_payment_link_with_http_info(id, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentLinksApi.get_payment_link ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentLinksApi.get_payment_link"
      end
      # resource path
      local_var_path = 'ipl/v2/payment-links/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      if 'GET' == 'POST'
        post_body = '{}'
      else
        post_body = nil
      end
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["get_payment_link","get_payment_link_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PblPaymentLinksGet200Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentLinksApi#get_payment_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
    # Update a Payment Link
    # You can update all information except the payment link number until any payment is received for a payment link.
    #
    # @param id The purchase number.
    # @param update_payment_link_request Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.
    # @param [Hash] opts the optional parameters
    # @return [PblPaymentLinksPost201Response]
    #
    def update_payment_link(id, update_payment_link_request, opts = {})
      data, status_code, headers = update_payment_link_with_http_info(id, update_payment_link_request, opts)
      return data, status_code, headers
    end

    # Update a Payment Link
    # You can update all information except the payment link number until any payment is received for a payment link.
    # @param id The purchase number.
    # @param update_payment_link_request Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PblPaymentLinksPost201Response, Fixnum, Hash)>] PblPaymentLinksPost201Response data, response status code and response headers
    def update_payment_link_with_http_info(id, update_payment_link_request, opts = {})

      if @api_client.config.debugging
          begin
            raise
                @api_client.config.logger.debug 'Calling API: PaymentLinksApi.update_payment_link ...'
            rescue
                puts 'Cannot write to log'
            end
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentLinksApi.update_payment_link"
      end
      # verify the required parameter 'update_payment_link_request' is set
      if @api_client.config.client_side_validation && update_payment_link_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_payment_link_request' when calling PaymentLinksApi.update_payment_link"
      end
      # resource path
      local_var_path = 'ipl/v2/payment-links/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/hal+json', 'application/json;charset=utf-8', 'application/hal+json;charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json;charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_payment_link_request)
      sdk_tracker = SdkTracker.new
      post_body = sdk_tracker.insert_developer_id_tracker(post_body, 'UpdatePaymentLinkRequest', @api_client.config.host, @api_client.merchantconfig.defaultDeveloperId)
      is_mle_supported_by_cybs_for_api = false
      if MLEUtility.check_is_mle_for_API(@api_client.merchantconfig, is_mle_supported_by_cybs_for_api, ["update_payment_link","update_payment_link_with_http_info"])
        post_body = MLEUtility.encrypt_request_payload(@api_client.merchantconfig, post_body)
      end
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PblPaymentLinksPost201Response')
      if @api_client.config.debugging
        begin
        raise
            @api_client.config.logger.debug "API called: PaymentLinksApi#update_payment_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
        rescue
            puts 'Cannot write to log'
        end
      end
      return data, status_code, headers
    end
  end
end
