=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for CyberSource::Boardingv1registrationsProductInformationSelectedProductsPaymentsSecureAcceptanceConfigurationInformationConfigurationsPaymentMethods
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'Boardingv1registrationsProductInformationSelectedProductsPaymentsSecureAcceptanceConfigurationInformationConfigurationsPaymentMethods' do
  before do
    # run before each test
    @instance = CyberSource::Boardingv1registrationsProductInformationSelectedProductsPaymentsSecureAcceptanceConfigurationInformationConfigurationsPaymentMethods.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of Boardingv1registrationsProductInformationSelectedProductsPaymentsSecureAcceptanceConfigurationInformationConfigurationsPaymentMethods' do
    it 'should create an instance of Boardingv1registrationsProductInformationSelectedProductsPaymentsSecureAcceptanceConfigurationInformationConfigurationsPaymentMethods' do
      expect(@instance).to be_instance_of(CyberSource::Boardingv1registrationsProductInformationSelectedProductsPaymentsSecureAcceptanceConfigurationInformationConfigurationsPaymentMethods)
    end
  end
  describe 'test attribute "enabled_payment_methods"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('Array<String>', ["CARD", "ECHECK", "VISACHECKOUT", "PAYPAL"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.enabled_payment_methods = value }.not_to raise_error
      # end
    end
  end

end
