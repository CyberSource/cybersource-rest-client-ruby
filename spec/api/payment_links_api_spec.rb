=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'spec_helper'
require 'json'

# Unit tests for CyberSource::PaymentLinksApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PaymentLinksApi' do
  before do
    # run before each test
    @instance = CyberSource::PaymentLinksApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PaymentLinksApi' do
    it 'should create an instance of PaymentLinksApi' do
      expect(@instance).to be_instance_of(CyberSource::PaymentLinksApi)
    end
  end

  # unit tests for create_payment_link
  # Create a Payment Link
  # Create a new payment link.
  # @param create_payment_link_request 
  # @param [Hash] opts the optional parameters
  # @return [PblPaymentLinksPost201Response]
  describe 'create_payment_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_payment_links
  # Get a List of Payment Links
  # Provides a (filtered) list of payment links that have been created in your account. You can filter the list based on the following status types:  - ACTIVE  - INACTIVE 
  # @param offset Page offset number.
  # @param limit Maximum number of items you would like returned.   Maximum limit: 1000 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status The status of the purchase or donation link.  Possible values:   - ACTIVE   - INACTIVE 
  # @return [PblPaymentLinksAllGet200Response]
  describe 'get_all_payment_links test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payment_link
  # Get Payment Link Details
  # You can retrieve details of a specific payment link. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
  # @param id The purchase number.
  # @param [Hash] opts the optional parameters
  # @return [PblPaymentLinksGet200Response]
  describe 'get_payment_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_payment_link
  # Update a Payment Link
  # You can update all information except the payment link number until any payment is received for a payment link.
  # @param id The purchase number.
  # @param update_payment_link_request Updating the purchase or donation link does not resend the link automatically. You must resend the purchase or donation link separately.
  # @param [Hash] opts the optional parameters
  # @return [PblPaymentLinksPost201Response]
  describe 'update_payment_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
