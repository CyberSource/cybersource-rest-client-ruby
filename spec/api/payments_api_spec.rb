=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for CyberSource::PaymentsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PaymentsApi' do
  before do
    # run before each test
    @instance = CyberSource::PaymentsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PaymentsApi' do
    it 'should create an instance of PaymentsApi' do
      expect(@instance).to be_instance_of(CyberSource::PaymentsApi)
    end
  end

  # unit tests for create_payment
  # Process a Payment
  # A payment authorizes the amount for the transaction. There are a number of supported payment features, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/payments/developer/ctv/rest/payments/payments-intro.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. 
  # @param create_payment_request 
  # @param [Hash] opts the optional parameters
  # @return [PtsV2PaymentsPost201Response]
  describe 'create_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for increment_auth
  # Increment an Authorization
  # Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization. 
  # @param id The ID returned from the original authorization request.
  # @param increment_auth_request 
  # @param [Hash] opts the optional parameters
  # @return [PtsV2IncrementalAuthorizationPatch201Response]
  describe 'increment_auth test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for refresh_payment_status
  # Check a Payment Status
  # Checks and updates the payment status 
  # @param id The payment id whose status needs to be checked and updated.
  # @param refresh_payment_status_request 
  # @param [Hash] opts the optional parameters
  # @return [PtsV2PaymentsPost201Response1]
  describe 'refresh_payment_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
