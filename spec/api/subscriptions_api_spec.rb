=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for CyberSource::SubscriptionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SubscriptionsApi' do
  before do
    # run before each test
    @instance = CyberSource::SubscriptionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SubscriptionsApi' do
    it 'should create an instance of SubscriptionsApi' do
      expect(@instance).to be_instance_of(CyberSource::SubscriptionsApi)
    end
  end

  # unit tests for activate_subscription
  # Activate a Subscription
  # Activate a &#x60;CANCELLED&#x60; Or &#x60;SUSPENDED&#x60; Subscription 
  # @param id Subscription Id
  # @param [Hash] opts the optional parameters
  # @return [ActivateSubscriptionResponse]
  describe 'activate_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cancel_subscription
  # Cancel a Subscription
  # Cancel a Subscription
  # @param id Subscription Id
  # @param [Hash] opts the optional parameters
  # @return [CancelSubscriptionResponse]
  describe 'cancel_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_subscription
  # Create a Subscription
  # Create a Recurring Billing Subscription
  # @param create_subscription_request 
  # @param [Hash] opts the optional parameters
  # @return [CreateSubscriptionResponse]
  describe 'create_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_subscriptions
  # Get a List of Subscriptions
  # Retrieve Subscriptions by Subscription Code &amp; Subscription Status. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Page offset number.
  # @option opts [Integer] :limit Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60; 
  # @option opts [String] :code Filter by Subscription Code
  # @option opts [String] :status Filter by Subscription Status
  # @return [GetAllSubscriptionsResponse]
  describe 'get_all_subscriptions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription
  # Get a Subscription
  # Get a Subscription by Subscription Id
  # @param id Subscription Id
  # @param [Hash] opts the optional parameters
  # @return [GetSubscriptionResponse]
  describe 'get_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_code
  # Get a Subscription Code
  # Get a Unique Subscription Code
  # @param [Hash] opts the optional parameters
  # @return [GetSubscriptionCodeResponse]
  describe 'get_subscription_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for suspend_subscription
  # Suspend a Subscription
  # Suspend a Subscription
  # @param id Subscription Id
  # @param [Hash] opts the optional parameters
  # @return [SuspendSubscriptionResponse]
  describe 'suspend_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_subscription
  # Update a Subscription
  # Update a Subscription by Subscription Id
  # @param id Subscription Id
  # @param update_subscription Update Subscription
  # @param [Hash] opts the optional parameters
  # @return [UpdateSubscriptionResponse]
  describe 'update_subscription test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
