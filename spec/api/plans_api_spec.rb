=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for CyberSource::PlansApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PlansApi' do
  before do
    # run before each test
    @instance = CyberSource::PlansApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PlansApi' do
    it 'should create an instance of PlansApi' do
      expect(@instance).to be_instance_of(CyberSource::PlansApi)
    end
  end

  # unit tests for activate_plan
  # Activate a Plan
  # Activate a Plan
  # @param id Plan Id
  # @param [Hash] opts the optional parameters
  # @return [ActivateDeactivatePlanResponse]
  describe 'activate_plan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_plan
  # Create a Plan
  # The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
  # @param create_plan_request 
  # @param [Hash] opts the optional parameters
  # @return [CreatePlanResponse]
  describe 'create_plan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for deactivate_plan
  # Deactivate a Plan
  # Deactivate a Plan
  # @param id Plan Id
  # @param [Hash] opts the optional parameters
  # @return [ActivateDeactivatePlanResponse]
  describe 'deactivate_plan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_plan
  # Delete a Plan
  # Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
  # @param id Plan Id
  # @param [Hash] opts the optional parameters
  # @return [DeletePlanResponse]
  describe 'delete_plan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_plan
  # Get a Plan
  # Retrieve a Plan details by Plan Id.
  # @param id Plan Id
  # @param [Hash] opts the optional parameters
  # @return [GetPlanResponse]
  describe 'get_plan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_plan_code
  # Get a Plan Code
  # Get a Unique Plan Code
  # @param [Hash] opts the optional parameters
  # @return [GetPlanCodeResponse]
  describe 'get_plan_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_plans
  # Get a List of Plans
  # Retrieve Plans by Plan Code &amp; Plan Status. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :offset Page offset number.
  # @option opts [Integer] :limit Number of items to be returned. Default - &#x60;20&#x60;, Max - &#x60;100&#x60; 
  # @option opts [String] :code Filter by Plan Code
  # @option opts [String] :status Filter by Plan Status
  # @option opts [String] :name Filter by Plan Name. (First sub string or full string) **[Not Recommended]** 
  # @return [GetAllPlansResponse]
  describe 'get_plans test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_plan
  # Update a Plan
  # Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
  # @param id Plan Id
  # @param update_plan_request 
  # @param [Hash] opts the optional parameters
  # @return [UpdatePlanResponse]
  describe 'update_plan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
