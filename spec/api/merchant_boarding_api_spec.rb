=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'spec_helper'
require 'json'

# Unit tests for CyberSource::MerchantBoardingApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MerchantBoardingApi' do
  before do
    # run before each test
    @instance = CyberSource::MerchantBoardingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MerchantBoardingApi' do
    it 'should create an instance of MerchantBoardingApi' do
      expect(@instance).to be_instance_of(CyberSource::MerchantBoardingApi)
    end
  end

  # unit tests for get_registration
  # Gets all the information on a boarding registration
  # This end point will get all information of a boarding registration 
  # @param registration_id Identifies the boarding registration to be updated
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2002]
  describe 'get_registration test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_registration
  # Create a boarding registration
  # Boarding Product is specifically for resellers who onboard merchants to resell their services to merchants and help integrate REST API into their systems.  The Boarding API is designed to simplify and streamline the onboarding process of merchants by enabling administrators and developers to: 1. Enable and Configure Products: The API helps in adding new products to an existing organization and configuring them to suit specific needs. 2. Update Merchant Information: The API allows for updating an organization&#39;s information efficiently. 3. Manage Payment Integration: It provides templates for secure payment integration and management. 
  # @param post_registration_body Boarding registration data
  # @param [Hash] opts the optional parameters
  # @option opts [String] :v_c_idempotency_id defines idempotency of the request
  # @return [InlineResponse2012]
  describe 'post_registration test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
