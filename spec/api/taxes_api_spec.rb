=begin
#CyberSource Merged Spec

#All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.38
=end

require 'spec_helper'
require 'json'

# Unit tests for CyberSource::TaxesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TaxesApi' do
  before do
    # run before each test
    @instance = CyberSource::TaxesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TaxesApi' do
    it 'should create an instance of TaxesApi' do
      expect(@instance).to be_instance_of(CyberSource::TaxesApi)
    end
  end

  # unit tests for calculate_tax
  # Calculate Taxes
  # The tax calculation service provides real-time sales tax and VAT calculations for orders placed with your business worldwide.  It enhances your ability to conduct business globally and enables you to avoid the risk and complexity of managing online tax calculation.  The service supports product-based tax rules and exemptions for goods and services.  The tax rates are updated twice a month and calculations include sub-level detail (rates per taxing jurisdiction, names and types of jurisdictions). Implementation guidance, list of supported countries, and information on tax reporting are in the [Tax User Guide](https://developer.cybersource.com/docs/cybs/en-us/tax-calculation/developer/all/rest/tax-calculation/tax-overview.html). The availability of API features for a merchant can depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts. 
  # @param tax_request 
  # @param [Hash] opts the optional parameters
  # @return [VasV2PaymentsPost201Response]
  describe 'calculate_tax test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for void_tax
  # Void Taxes
  # Pass the Tax Request ID in the PATCH request to void the committed tax calculation.
  # @param void_tax_request 
  # @param id The tax ID returned from a previous request.
  # @param [Hash] opts the optional parameters
  # @return [VasV2TaxVoid200Response]
  describe 'void_tax test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
